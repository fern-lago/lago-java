/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.46.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorBadRequest;
import org.openapitools.client.model.ApiErrorNotAllowed;
import org.openapitools.client.model.ApiErrorNotFound;
import org.openapitools.client.model.ApiErrorUnauthorized;
import org.openapitools.client.model.ApiErrorUnprocessableEntity;
import java.util.UUID;
import org.openapitools.client.model.Wallet;
import org.openapitools.client.model.WalletCreateInput;
import org.openapitools.client.model.WalletTransactionCreateInput;
import org.openapitools.client.model.WalletTransactions;
import org.openapitools.client.model.WalletTransactionsPaginated;
import org.openapitools.client.model.WalletUpdateInput;
import org.openapitools.client.model.WalletsPaginated;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WalletsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WalletsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WalletsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createWallet
     * @param walletCreateInput Wallet payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWalletCall(WalletCreateInput walletCreateInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = walletCreateInput;

        // create path and map variables
        String localVarPath = "/wallets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWalletValidateBeforeCall(WalletCreateInput walletCreateInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'walletCreateInput' is set
        if (walletCreateInput == null) {
            throw new ApiException("Missing the required parameter 'walletCreateInput' when calling createWallet(Async)");
        }

        return createWalletCall(walletCreateInput, _callback);

    }

    /**
     * Create a wallet
     * This endpoint is used to create a wallet with prepaid credits.
     * @param walletCreateInput Wallet payload (required)
     * @return Wallet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity error </td><td>  -  </td></tr>
     </table>
     */
    public Wallet createWallet(WalletCreateInput walletCreateInput) throws ApiException {
        ApiResponse<Wallet> localVarResp = createWalletWithHttpInfo(walletCreateInput);
        return localVarResp.getData();
    }

    /**
     * Create a wallet
     * This endpoint is used to create a wallet with prepaid credits.
     * @param walletCreateInput Wallet payload (required)
     * @return ApiResponse&lt;Wallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Wallet> createWalletWithHttpInfo(WalletCreateInput walletCreateInput) throws ApiException {
        okhttp3.Call localVarCall = createWalletValidateBeforeCall(walletCreateInput, null);
        Type localVarReturnType = new TypeToken<Wallet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a wallet (asynchronously)
     * This endpoint is used to create a wallet with prepaid credits.
     * @param walletCreateInput Wallet payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWalletAsync(WalletCreateInput walletCreateInput, final ApiCallback<Wallet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWalletValidateBeforeCall(walletCreateInput, _callback);
        Type localVarReturnType = new TypeToken<Wallet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWalletTransaction
     * @param walletTransactionCreateInput Wallet transaction payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet transaction created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWalletTransactionCall(WalletTransactionCreateInput walletTransactionCreateInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = walletTransactionCreateInput;

        // create path and map variables
        String localVarPath = "/wallet_transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWalletTransactionValidateBeforeCall(WalletTransactionCreateInput walletTransactionCreateInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'walletTransactionCreateInput' is set
        if (walletTransactionCreateInput == null) {
            throw new ApiException("Missing the required parameter 'walletTransactionCreateInput' when calling createWalletTransaction(Async)");
        }

        return createWalletTransactionCall(walletTransactionCreateInput, _callback);

    }

    /**
     * Top up a wallet
     * This endpoint is used to top-up an active wallet.
     * @param walletTransactionCreateInput Wallet transaction payload (required)
     * @return WalletTransactions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet transaction created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity error </td><td>  -  </td></tr>
     </table>
     */
    public WalletTransactions createWalletTransaction(WalletTransactionCreateInput walletTransactionCreateInput) throws ApiException {
        ApiResponse<WalletTransactions> localVarResp = createWalletTransactionWithHttpInfo(walletTransactionCreateInput);
        return localVarResp.getData();
    }

    /**
     * Top up a wallet
     * This endpoint is used to top-up an active wallet.
     * @param walletTransactionCreateInput Wallet transaction payload (required)
     * @return ApiResponse&lt;WalletTransactions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet transaction created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WalletTransactions> createWalletTransactionWithHttpInfo(WalletTransactionCreateInput walletTransactionCreateInput) throws ApiException {
        okhttp3.Call localVarCall = createWalletTransactionValidateBeforeCall(walletTransactionCreateInput, null);
        Type localVarReturnType = new TypeToken<WalletTransactions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Top up a wallet (asynchronously)
     * This endpoint is used to top-up an active wallet.
     * @param walletTransactionCreateInput Wallet transaction payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet transaction created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWalletTransactionAsync(WalletTransactionCreateInput walletTransactionCreateInput, final ApiCallback<WalletTransactions> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWalletTransactionValidateBeforeCall(walletTransactionCreateInput, _callback);
        Type localVarReturnType = new TypeToken<WalletTransactions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyWallet
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet terminated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Not Allowed error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyWalletCall(UUID lagoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/{lago_id}"
            .replace("{" + "lago_id" + "}", localVarApiClient.escapeString(lagoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyWalletValidateBeforeCall(UUID lagoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lagoId' is set
        if (lagoId == null) {
            throw new ApiException("Missing the required parameter 'lagoId' when calling destroyWallet(Async)");
        }

        return destroyWalletCall(lagoId, _callback);

    }

    /**
     * Terminate a wallet
     * This endpoint is used to terminate an existing wallet with prepaid credits.
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @return Wallet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet terminated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Not Allowed error </td><td>  -  </td></tr>
     </table>
     */
    public Wallet destroyWallet(UUID lagoId) throws ApiException {
        ApiResponse<Wallet> localVarResp = destroyWalletWithHttpInfo(lagoId);
        return localVarResp.getData();
    }

    /**
     * Terminate a wallet
     * This endpoint is used to terminate an existing wallet with prepaid credits.
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @return ApiResponse&lt;Wallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet terminated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Not Allowed error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Wallet> destroyWalletWithHttpInfo(UUID lagoId) throws ApiException {
        okhttp3.Call localVarCall = destroyWalletValidateBeforeCall(lagoId, null);
        Type localVarReturnType = new TypeToken<Wallet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Terminate a wallet (asynchronously)
     * This endpoint is used to terminate an existing wallet with prepaid credits.
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet terminated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Not Allowed error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyWalletAsync(UUID lagoId, final ApiCallback<Wallet> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyWalletValidateBeforeCall(lagoId, _callback);
        Type localVarReturnType = new TypeToken<Wallet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllWalletTransactions
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @param page Page number. (optional)
     * @param perPage Number of records per page. (optional)
     * @param status The status of the wallet transaction. Possible values are &#x60;pending&#x60; or &#x60;settled&#x60;. (optional)
     * @param transactionType The transaction type of the wallet transaction. Possible values are &#x60;inbound&#x60; (increasing the wallet balance) or &#x60;outbound&#x60; (decreasing the wallet balance). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet transactions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllWalletTransactionsCall(UUID lagoId, Integer page, Integer perPage, String status, String transactionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/{lago_id}/wallet_transactions"
            .replace("{" + "lago_id" + "}", localVarApiClient.escapeString(lagoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (transactionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction_type", transactionType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllWalletTransactionsValidateBeforeCall(UUID lagoId, Integer page, Integer perPage, String status, String transactionType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lagoId' is set
        if (lagoId == null) {
            throw new ApiException("Missing the required parameter 'lagoId' when calling findAllWalletTransactions(Async)");
        }

        return findAllWalletTransactionsCall(lagoId, page, perPage, status, transactionType, _callback);

    }

    /**
     * List all wallet transactions
     * This endpoint is used to list all wallet transactions.
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @param page Page number. (optional)
     * @param perPage Number of records per page. (optional)
     * @param status The status of the wallet transaction. Possible values are &#x60;pending&#x60; or &#x60;settled&#x60;. (optional)
     * @param transactionType The transaction type of the wallet transaction. Possible values are &#x60;inbound&#x60; (increasing the wallet balance) or &#x60;outbound&#x60; (decreasing the wallet balance). (optional)
     * @return WalletTransactionsPaginated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet transactions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
     </table>
     */
    public WalletTransactionsPaginated findAllWalletTransactions(UUID lagoId, Integer page, Integer perPage, String status, String transactionType) throws ApiException {
        ApiResponse<WalletTransactionsPaginated> localVarResp = findAllWalletTransactionsWithHttpInfo(lagoId, page, perPage, status, transactionType);
        return localVarResp.getData();
    }

    /**
     * List all wallet transactions
     * This endpoint is used to list all wallet transactions.
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @param page Page number. (optional)
     * @param perPage Number of records per page. (optional)
     * @param status The status of the wallet transaction. Possible values are &#x60;pending&#x60; or &#x60;settled&#x60;. (optional)
     * @param transactionType The transaction type of the wallet transaction. Possible values are &#x60;inbound&#x60; (increasing the wallet balance) or &#x60;outbound&#x60; (decreasing the wallet balance). (optional)
     * @return ApiResponse&lt;WalletTransactionsPaginated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet transactions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WalletTransactionsPaginated> findAllWalletTransactionsWithHttpInfo(UUID lagoId, Integer page, Integer perPage, String status, String transactionType) throws ApiException {
        okhttp3.Call localVarCall = findAllWalletTransactionsValidateBeforeCall(lagoId, page, perPage, status, transactionType, null);
        Type localVarReturnType = new TypeToken<WalletTransactionsPaginated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all wallet transactions (asynchronously)
     * This endpoint is used to list all wallet transactions.
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @param page Page number. (optional)
     * @param perPage Number of records per page. (optional)
     * @param status The status of the wallet transaction. Possible values are &#x60;pending&#x60; or &#x60;settled&#x60;. (optional)
     * @param transactionType The transaction type of the wallet transaction. Possible values are &#x60;inbound&#x60; (increasing the wallet balance) or &#x60;outbound&#x60; (decreasing the wallet balance). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet transactions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllWalletTransactionsAsync(UUID lagoId, Integer page, Integer perPage, String status, String transactionType, final ApiCallback<WalletTransactionsPaginated> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllWalletTransactionsValidateBeforeCall(lagoId, page, perPage, status, transactionType, _callback);
        Type localVarReturnType = new TypeToken<WalletTransactionsPaginated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllWallets
     * @param externalCustomerId The customer external unique identifier (provided by your own application). (required)
     * @param page Page number. (optional)
     * @param perPage Number of records per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallets </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllWalletsCall(String externalCustomerId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (externalCustomerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_customer_id", externalCustomerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllWalletsValidateBeforeCall(String externalCustomerId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalCustomerId' is set
        if (externalCustomerId == null) {
            throw new ApiException("Missing the required parameter 'externalCustomerId' when calling findAllWallets(Async)");
        }

        return findAllWalletsCall(externalCustomerId, page, perPage, _callback);

    }

    /**
     * List all wallets
     * This endpoint is used to list all wallets with prepaid credits.
     * @param externalCustomerId The customer external unique identifier (provided by your own application). (required)
     * @param page Page number. (optional)
     * @param perPage Number of records per page. (optional)
     * @return WalletsPaginated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallets </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
     </table>
     */
    public WalletsPaginated findAllWallets(String externalCustomerId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<WalletsPaginated> localVarResp = findAllWalletsWithHttpInfo(externalCustomerId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List all wallets
     * This endpoint is used to list all wallets with prepaid credits.
     * @param externalCustomerId The customer external unique identifier (provided by your own application). (required)
     * @param page Page number. (optional)
     * @param perPage Number of records per page. (optional)
     * @return ApiResponse&lt;WalletsPaginated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallets </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WalletsPaginated> findAllWalletsWithHttpInfo(String externalCustomerId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = findAllWalletsValidateBeforeCall(externalCustomerId, page, perPage, null);
        Type localVarReturnType = new TypeToken<WalletsPaginated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all wallets (asynchronously)
     * This endpoint is used to list all wallets with prepaid credits.
     * @param externalCustomerId The customer external unique identifier (provided by your own application). (required)
     * @param page Page number. (optional)
     * @param perPage Number of records per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallets </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllWalletsAsync(String externalCustomerId, Integer page, Integer perPage, final ApiCallback<WalletsPaginated> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllWalletsValidateBeforeCall(externalCustomerId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<WalletsPaginated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findWallet
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findWalletCall(UUID lagoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallets/{lago_id}"
            .replace("{" + "lago_id" + "}", localVarApiClient.escapeString(lagoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findWalletValidateBeforeCall(UUID lagoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lagoId' is set
        if (lagoId == null) {
            throw new ApiException("Missing the required parameter 'lagoId' when calling findWallet(Async)");
        }

        return findWalletCall(lagoId, _callback);

    }

    /**
     * Retrieve a wallet
     * This endpoint is used to retrieve an existing wallet with prepaid credits.
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @return Wallet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
     </table>
     */
    public Wallet findWallet(UUID lagoId) throws ApiException {
        ApiResponse<Wallet> localVarResp = findWalletWithHttpInfo(lagoId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a wallet
     * This endpoint is used to retrieve an existing wallet with prepaid credits.
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @return ApiResponse&lt;Wallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Wallet> findWalletWithHttpInfo(UUID lagoId) throws ApiException {
        okhttp3.Call localVarCall = findWalletValidateBeforeCall(lagoId, null);
        Type localVarReturnType = new TypeToken<Wallet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a wallet (asynchronously)
     * This endpoint is used to retrieve an existing wallet with prepaid credits.
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findWalletAsync(UUID lagoId, final ApiCallback<Wallet> _callback) throws ApiException {

        okhttp3.Call localVarCall = findWalletValidateBeforeCall(lagoId, _callback);
        Type localVarReturnType = new TypeToken<Wallet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWallet
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @param walletUpdateInput Wallet update payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWalletCall(UUID lagoId, WalletUpdateInput walletUpdateInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = walletUpdateInput;

        // create path and map variables
        String localVarPath = "/wallets/{lago_id}"
            .replace("{" + "lago_id" + "}", localVarApiClient.escapeString(lagoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWalletValidateBeforeCall(UUID lagoId, WalletUpdateInput walletUpdateInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lagoId' is set
        if (lagoId == null) {
            throw new ApiException("Missing the required parameter 'lagoId' when calling updateWallet(Async)");
        }

        // verify the required parameter 'walletUpdateInput' is set
        if (walletUpdateInput == null) {
            throw new ApiException("Missing the required parameter 'walletUpdateInput' when calling updateWallet(Async)");
        }

        return updateWalletCall(lagoId, walletUpdateInput, _callback);

    }

    /**
     * Update a wallet
     * This endpoint is used to update an existing wallet with prepaid credits.
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @param walletUpdateInput Wallet update payload (required)
     * @return Wallet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity error </td><td>  -  </td></tr>
     </table>
     */
    public Wallet updateWallet(UUID lagoId, WalletUpdateInput walletUpdateInput) throws ApiException {
        ApiResponse<Wallet> localVarResp = updateWalletWithHttpInfo(lagoId, walletUpdateInput);
        return localVarResp.getData();
    }

    /**
     * Update a wallet
     * This endpoint is used to update an existing wallet with prepaid credits.
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @param walletUpdateInput Wallet update payload (required)
     * @return ApiResponse&lt;Wallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Wallet> updateWalletWithHttpInfo(UUID lagoId, WalletUpdateInput walletUpdateInput) throws ApiException {
        okhttp3.Call localVarCall = updateWalletValidateBeforeCall(lagoId, walletUpdateInput, null);
        Type localVarReturnType = new TypeToken<Wallet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a wallet (asynchronously)
     * This endpoint is used to update an existing wallet with prepaid credits.
     * @param lagoId Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system. (required)
     * @param walletUpdateInput Wallet update payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Wallet updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWalletAsync(UUID lagoId, WalletUpdateInput walletUpdateInput, final ApiCallback<Wallet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWalletValidateBeforeCall(lagoId, walletUpdateInput, _callback);
        Type localVarReturnType = new TypeToken<Wallet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
