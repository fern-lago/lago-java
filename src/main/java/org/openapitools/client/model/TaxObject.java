/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.46.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaxObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-31T09:20:28.589842Z[Etc/UTC]")
public class TaxObject {
  public static final String SERIALIZED_NAME_LAGO_ID = "lago_id";
  @SerializedName(SERIALIZED_NAME_LAGO_ID)
  private UUID lagoId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private BigDecimal rate;

  public static final String SERIALIZED_NAME_APPLIED_TO_ORGANIZATION = "applied_to_organization";
  @SerializedName(SERIALIZED_NAME_APPLIED_TO_ORGANIZATION)
  private Boolean appliedToOrganization;

  public static final String SERIALIZED_NAME_ADD_ONS_COUNT = "add_ons_count";
  @SerializedName(SERIALIZED_NAME_ADD_ONS_COUNT)
  private Integer addOnsCount;

  public static final String SERIALIZED_NAME_CHARGES_COUNT = "charges_count";
  @SerializedName(SERIALIZED_NAME_CHARGES_COUNT)
  private Integer chargesCount;

  public static final String SERIALIZED_NAME_CUSTOMERS_COUNT = "customers_count";
  @SerializedName(SERIALIZED_NAME_CUSTOMERS_COUNT)
  private Integer customersCount;

  public static final String SERIALIZED_NAME_PLANS_COUNT = "plans_count";
  @SerializedName(SERIALIZED_NAME_PLANS_COUNT)
  private Integer plansCount;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public TaxObject() {
  }

  public TaxObject lagoId(UUID lagoId) {
    
    this.lagoId = lagoId;
    return this;
  }

   /**
   * Unique identifier of the tax, created by Lago.
   * @return lagoId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoId() {
    return lagoId;
  }


  public void setLagoId(UUID lagoId) {
    this.lagoId = lagoId;
  }


  public TaxObject name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the tax.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TaxObject code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Unique code used to identify the tax associated with the API request.
   * @return code
  **/
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public TaxObject description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Internal description of the taxe
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public TaxObject rate(BigDecimal rate) {
    
    this.rate = rate;
    return this;
  }

   /**
   * The percentage rate of the tax
   * @return rate
  **/
  @javax.annotation.Nonnull
  public BigDecimal getRate() {
    return rate;
  }


  public void setRate(BigDecimal rate) {
    this.rate = rate;
  }


  public TaxObject appliedToOrganization(Boolean appliedToOrganization) {
    
    this.appliedToOrganization = appliedToOrganization;
    return this;
  }

   /**
   * Set to &#x60;true&#x60; if the tax is used as one of the organization&#39;s default
   * @return appliedToOrganization
  **/
  @javax.annotation.Nonnull
  public Boolean getAppliedToOrganization() {
    return appliedToOrganization;
  }


  public void setAppliedToOrganization(Boolean appliedToOrganization) {
    this.appliedToOrganization = appliedToOrganization;
  }


  public TaxObject addOnsCount(Integer addOnsCount) {
    
    this.addOnsCount = addOnsCount;
    return this;
  }

   /**
   * Number of add-ons this tax is applied to.
   * @return addOnsCount
  **/
  @javax.annotation.Nullable
  public Integer getAddOnsCount() {
    return addOnsCount;
  }


  public void setAddOnsCount(Integer addOnsCount) {
    this.addOnsCount = addOnsCount;
  }


  public TaxObject chargesCount(Integer chargesCount) {
    
    this.chargesCount = chargesCount;
    return this;
  }

   /**
   * Number of charges this tax is applied to.
   * @return chargesCount
  **/
  @javax.annotation.Nullable
  public Integer getChargesCount() {
    return chargesCount;
  }


  public void setChargesCount(Integer chargesCount) {
    this.chargesCount = chargesCount;
  }


  public TaxObject customersCount(Integer customersCount) {
    
    this.customersCount = customersCount;
    return this;
  }

   /**
   * Number of customers this tax is applied to (directly or via the organization&#39;s default).
   * @return customersCount
  **/
  @javax.annotation.Nonnull
  public Integer getCustomersCount() {
    return customersCount;
  }


  public void setCustomersCount(Integer customersCount) {
    this.customersCount = customersCount;
  }


  public TaxObject plansCount(Integer plansCount) {
    
    this.plansCount = plansCount;
    return this;
  }

   /**
   * Number of plans this tax is applied to.
   * @return plansCount
  **/
  @javax.annotation.Nullable
  public Integer getPlansCount() {
    return plansCount;
  }


  public void setPlansCount(Integer plansCount) {
    this.plansCount = plansCount;
  }


  public TaxObject createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Creation date of the tax.
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxObject taxObject = (TaxObject) o;
    return Objects.equals(this.lagoId, taxObject.lagoId) &&
        Objects.equals(this.name, taxObject.name) &&
        Objects.equals(this.code, taxObject.code) &&
        Objects.equals(this.description, taxObject.description) &&
        Objects.equals(this.rate, taxObject.rate) &&
        Objects.equals(this.appliedToOrganization, taxObject.appliedToOrganization) &&
        Objects.equals(this.addOnsCount, taxObject.addOnsCount) &&
        Objects.equals(this.chargesCount, taxObject.chargesCount) &&
        Objects.equals(this.customersCount, taxObject.customersCount) &&
        Objects.equals(this.plansCount, taxObject.plansCount) &&
        Objects.equals(this.createdAt, taxObject.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lagoId, name, code, description, rate, appliedToOrganization, addOnsCount, chargesCount, customersCount, plansCount, createdAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxObject {\n");
    sb.append("    lagoId: ").append(toIndentedString(lagoId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    appliedToOrganization: ").append(toIndentedString(appliedToOrganization)).append("\n");
    sb.append("    addOnsCount: ").append(toIndentedString(addOnsCount)).append("\n");
    sb.append("    chargesCount: ").append(toIndentedString(chargesCount)).append("\n");
    sb.append("    customersCount: ").append(toIndentedString(customersCount)).append("\n");
    sb.append("    plansCount: ").append(toIndentedString(plansCount)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lago_id");
    openapiFields.add("name");
    openapiFields.add("code");
    openapiFields.add("description");
    openapiFields.add("rate");
    openapiFields.add("applied_to_organization");
    openapiFields.add("add_ons_count");
    openapiFields.add("charges_count");
    openapiFields.add("customers_count");
    openapiFields.add("plans_count");
    openapiFields.add("created_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lago_id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("rate");
    openapiRequiredFields.add("applied_to_organization");
    openapiRequiredFields.add("customers_count");
    openapiRequiredFields.add("created_at");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TaxObject
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaxObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxObject is not found in the empty JSON string", TaxObject.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TaxObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TaxObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("lago_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxObject.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxObject>() {
           @Override
           public void write(JsonWriter out, TaxObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaxObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaxObject
  * @throws IOException if the JSON string is invalid with respect to TaxObject
  */
  public static TaxObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxObject.class);
  }

 /**
  * Convert an instance of TaxObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

