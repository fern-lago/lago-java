/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.52.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URI;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.InvoiceAppliedTaxObject;
import org.openapitools.client.model.InvoiceMetadataObject;
import org.openapitools.client.model.InvoiceObjectCustomer;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * InvoiceObject
 */
@JsonPropertyOrder({
  InvoiceObject.JSON_PROPERTY_LAGO_ID,
  InvoiceObject.JSON_PROPERTY_SEQUENTIAL_ID,
  InvoiceObject.JSON_PROPERTY_NUMBER,
  InvoiceObject.JSON_PROPERTY_ISSUING_DATE,
  InvoiceObject.JSON_PROPERTY_PAYMENT_DUE_DATE,
  InvoiceObject.JSON_PROPERTY_NET_PAYMENT_TERM,
  InvoiceObject.JSON_PROPERTY_INVOICE_TYPE,
  InvoiceObject.JSON_PROPERTY_STATUS,
  InvoiceObject.JSON_PROPERTY_PAYMENT_STATUS,
  InvoiceObject.JSON_PROPERTY_CURRENCY,
  InvoiceObject.JSON_PROPERTY_FEES_AMOUNT_CENTS,
  InvoiceObject.JSON_PROPERTY_COUPONS_AMOUNT_CENTS,
  InvoiceObject.JSON_PROPERTY_CREDIT_NOTES_AMOUNT_CENTS,
  InvoiceObject.JSON_PROPERTY_SUB_TOTAL_EXCLUDING_TAXES_AMOUNT_CENTS,
  InvoiceObject.JSON_PROPERTY_TAXES_AMOUNT_CENTS,
  InvoiceObject.JSON_PROPERTY_SUB_TOTAL_INCLUDING_TAXES_AMOUNT_CENTS,
  InvoiceObject.JSON_PROPERTY_PREPAID_CREDIT_AMOUNT_CENTS,
  InvoiceObject.JSON_PROPERTY_TOTAL_AMOUNT_CENTS,
  InvoiceObject.JSON_PROPERTY_VERSION_NUMBER,
  InvoiceObject.JSON_PROPERTY_FILE_URL,
  InvoiceObject.JSON_PROPERTY_CUSTOMER,
  InvoiceObject.JSON_PROPERTY_METADATA,
  InvoiceObject.JSON_PROPERTY_APPLIED_TAXES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-24T14:41:05.749099654Z[Etc/UTC]")
public class InvoiceObject {
  public static final String JSON_PROPERTY_LAGO_ID = "lago_id";
  private UUID lagoId;

  public static final String JSON_PROPERTY_SEQUENTIAL_ID = "sequential_id";
  private Integer sequentialId;

  public static final String JSON_PROPERTY_NUMBER = "number";
  private String number;

  public static final String JSON_PROPERTY_ISSUING_DATE = "issuing_date";
  private LocalDate issuingDate;

  public static final String JSON_PROPERTY_PAYMENT_DUE_DATE = "payment_due_date";
  private LocalDate paymentDueDate;

  public static final String JSON_PROPERTY_NET_PAYMENT_TERM = "net_payment_term";
  private Integer netPaymentTerm;

  /**
   * The type of invoice issued. Possible values are &#x60;subscription&#x60;, &#x60;one-off&#x60; or &#x60;credit&#x60;.
   */
  public enum InvoiceTypeEnum {
    SUBSCRIPTION("subscription"),
    
    ADD_ON("add_on"),
    
    CREDIT("credit"),
    
    ONE_OFF("one_off");

    private String value;

    InvoiceTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InvoiceTypeEnum fromValue(String value) {
      for (InvoiceTypeEnum b : InvoiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INVOICE_TYPE = "invoice_type";
  private InvoiceTypeEnum invoiceType;

  /**
   * The status of the invoice. It indicates the current state of the invoice and can have two possible values: - &#x60;draft&#x60;: the invoice is in the draft state, waiting for the end of the grace period to be finalized. During this period, events can still be ingested and added to the invoice. - &#x60;finalized&#x60;: the invoice has been issued and finalized. In this state, events cannot be ingested or added to the invoice anymore.
   */
  public enum StatusEnum {
    DRAFT("draft"),
    
    FINALIZED("finalized");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  /**
   * The status of the payment associated with the invoice. It can have one of the following values: - &#x60;pending&#x60;: the payment is pending, waiting for payment processing in Stripe or when the invoice is emitted but users have not updated the payment status through the endpoint. - &#x60;succeeded&#x60;: the payment of the invoice has been successfully processed. - &#x60;failed&#x60;: the payment of the invoice has failed or encountered an error during processing.
   */
  public enum PaymentStatusEnum {
    PENDING("pending"),
    
    SUCCEEDED("succeeded"),
    
    FAILED("failed");

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PaymentStatusEnum fromValue(String value) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PAYMENT_STATUS = "payment_status";
  private PaymentStatusEnum paymentStatus;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private Currency currency;

  public static final String JSON_PROPERTY_FEES_AMOUNT_CENTS = "fees_amount_cents";
  private Integer feesAmountCents;

  public static final String JSON_PROPERTY_COUPONS_AMOUNT_CENTS = "coupons_amount_cents";
  private Integer couponsAmountCents;

  public static final String JSON_PROPERTY_CREDIT_NOTES_AMOUNT_CENTS = "credit_notes_amount_cents";
  private Integer creditNotesAmountCents;

  public static final String JSON_PROPERTY_SUB_TOTAL_EXCLUDING_TAXES_AMOUNT_CENTS = "sub_total_excluding_taxes_amount_cents";
  private Integer subTotalExcludingTaxesAmountCents;

  public static final String JSON_PROPERTY_TAXES_AMOUNT_CENTS = "taxes_amount_cents";
  private Integer taxesAmountCents;

  public static final String JSON_PROPERTY_SUB_TOTAL_INCLUDING_TAXES_AMOUNT_CENTS = "sub_total_including_taxes_amount_cents";
  private Integer subTotalIncludingTaxesAmountCents;

  public static final String JSON_PROPERTY_PREPAID_CREDIT_AMOUNT_CENTS = "prepaid_credit_amount_cents";
  private Integer prepaidCreditAmountCents;

  public static final String JSON_PROPERTY_TOTAL_AMOUNT_CENTS = "total_amount_cents";
  private Integer totalAmountCents;

  public static final String JSON_PROPERTY_VERSION_NUMBER = "version_number";
  private Integer versionNumber;

  public static final String JSON_PROPERTY_FILE_URL = "file_url";
  private URI fileUrl;

  public static final String JSON_PROPERTY_CUSTOMER = "customer";
  private InvoiceObjectCustomer customer;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private List<InvoiceMetadataObject> metadata;

  public static final String JSON_PROPERTY_APPLIED_TAXES = "applied_taxes";
  private List<InvoiceAppliedTaxObject> appliedTaxes;

  public InvoiceObject() {
  }

  public InvoiceObject lagoId(UUID lagoId) {
    
    this.lagoId = lagoId;
    return this;
  }

   /**
   * Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the feeâ€™s record within the Lago system.
   * @return lagoId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LAGO_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getLagoId() {
    return lagoId;
  }


  @JsonProperty(JSON_PROPERTY_LAGO_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLagoId(UUID lagoId) {
    this.lagoId = lagoId;
  }


  public InvoiceObject sequentialId(Integer sequentialId) {
    
    this.sequentialId = sequentialId;
    return this;
  }

   /**
   * This ID helps in uniquely identifying and organizing the invoices associated with a specific customer. It provides a sequential numbering system specific to the customer, allowing for easy tracking and management of invoices within the customer&#39;s context.
   * @return sequentialId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SEQUENTIAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSequentialId() {
    return sequentialId;
  }


  @JsonProperty(JSON_PROPERTY_SEQUENTIAL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSequentialId(Integer sequentialId) {
    this.sequentialId = sequentialId;
  }


  public InvoiceObject number(String number) {
    
    this.number = number;
    return this;
  }

   /**
   * The unique number assigned to the invoice. This number serves as a distinct identifier for the invoice and helps in differentiating it from other invoices in the system.
   * @return number
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNumber() {
    return number;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNumber(String number) {
    this.number = number;
  }


  public InvoiceObject issuingDate(LocalDate issuingDate) {
    
    this.issuingDate = issuingDate;
    return this;
  }

   /**
   * The date when the invoice was issued. It is provided in the ISO 8601 date format.
   * @return issuingDate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ISSUING_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getIssuingDate() {
    return issuingDate;
  }


  @JsonProperty(JSON_PROPERTY_ISSUING_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIssuingDate(LocalDate issuingDate) {
    this.issuingDate = issuingDate;
  }


  public InvoiceObject paymentDueDate(LocalDate paymentDueDate) {
    
    this.paymentDueDate = paymentDueDate;
    return this;
  }

   /**
   * The payment due date for the invoice, specified in the ISO 8601 date format.
   * @return paymentDueDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_DUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getPaymentDueDate() {
    return paymentDueDate;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_DUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentDueDate(LocalDate paymentDueDate) {
    this.paymentDueDate = paymentDueDate;
  }


  public InvoiceObject netPaymentTerm(Integer netPaymentTerm) {
    
    this.netPaymentTerm = netPaymentTerm;
    return this;
  }

   /**
   * The net payment term, expressed in days, specifies the duration within which a customer is expected to remit payment after the invoice is finalized.
   * @return netPaymentTerm
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NET_PAYMENT_TERM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNetPaymentTerm() {
    return netPaymentTerm;
  }


  @JsonProperty(JSON_PROPERTY_NET_PAYMENT_TERM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetPaymentTerm(Integer netPaymentTerm) {
    this.netPaymentTerm = netPaymentTerm;
  }


  public InvoiceObject invoiceType(InvoiceTypeEnum invoiceType) {
    
    this.invoiceType = invoiceType;
    return this;
  }

   /**
   * The type of invoice issued. Possible values are &#x60;subscription&#x60;, &#x60;one-off&#x60; or &#x60;credit&#x60;.
   * @return invoiceType
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INVOICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public InvoiceTypeEnum getInvoiceType() {
    return invoiceType;
  }


  @JsonProperty(JSON_PROPERTY_INVOICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInvoiceType(InvoiceTypeEnum invoiceType) {
    this.invoiceType = invoiceType;
  }


  public InvoiceObject status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the invoice. It indicates the current state of the invoice and can have two possible values: - &#x60;draft&#x60;: the invoice is in the draft state, waiting for the end of the grace period to be finalized. During this period, events can still be ingested and added to the invoice. - &#x60;finalized&#x60;: the invoice has been issued and finalized. In this state, events cannot be ingested or added to the invoice anymore.
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public InvoiceObject paymentStatus(PaymentStatusEnum paymentStatus) {
    
    this.paymentStatus = paymentStatus;
    return this;
  }

   /**
   * The status of the payment associated with the invoice. It can have one of the following values: - &#x60;pending&#x60;: the payment is pending, waiting for payment processing in Stripe or when the invoice is emitted but users have not updated the payment status through the endpoint. - &#x60;succeeded&#x60;: the payment of the invoice has been successfully processed. - &#x60;failed&#x60;: the payment of the invoice has failed or encountered an error during processing.
   * @return paymentStatus
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAYMENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public InvoiceObject currency(Currency currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Currency getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public InvoiceObject feesAmountCents(Integer feesAmountCents) {
    
    this.feesAmountCents = feesAmountCents;
    return this;
  }

   /**
   * The total sum of fees amount in cents. It calculates the cumulative amount of all the fees associated with the invoice, providing a consolidated value.
   * @return feesAmountCents
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FEES_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFeesAmountCents() {
    return feesAmountCents;
  }


  @JsonProperty(JSON_PROPERTY_FEES_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFeesAmountCents(Integer feesAmountCents) {
    this.feesAmountCents = feesAmountCents;
  }


  public InvoiceObject couponsAmountCents(Integer couponsAmountCents) {
    
    this.couponsAmountCents = couponsAmountCents;
    return this;
  }

   /**
   * The total sum of all coupons discounted on the invoice. It calculates the cumulative discount amount applied by coupons, expressed in cents.
   * @return couponsAmountCents
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUPONS_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCouponsAmountCents() {
    return couponsAmountCents;
  }


  @JsonProperty(JSON_PROPERTY_COUPONS_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCouponsAmountCents(Integer couponsAmountCents) {
    this.couponsAmountCents = couponsAmountCents;
  }


  public InvoiceObject creditNotesAmountCents(Integer creditNotesAmountCents) {
    
    this.creditNotesAmountCents = creditNotesAmountCents;
    return this;
  }

   /**
   * The total sum of all credit notes discounted on the invoice. It calculates the cumulative discount amount applied by credit notes, expressed in cents.
   * @return creditNotesAmountCents
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREDIT_NOTES_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCreditNotesAmountCents() {
    return creditNotesAmountCents;
  }


  @JsonProperty(JSON_PROPERTY_CREDIT_NOTES_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreditNotesAmountCents(Integer creditNotesAmountCents) {
    this.creditNotesAmountCents = creditNotesAmountCents;
  }


  public InvoiceObject subTotalExcludingTaxesAmountCents(Integer subTotalExcludingTaxesAmountCents) {
    
    this.subTotalExcludingTaxesAmountCents = subTotalExcludingTaxesAmountCents;
    return this;
  }

   /**
   * Subtotal amount, excluding taxes, expressed in cents. This field depends on the version number. Here are the definitions based on the version: - Version 1: is equal to the sum of &#x60;fees_amount_cents&#x60;, minus &#x60;coupons_amount_cents&#x60;, and minus &#x60;prepaid_credit_amount_cents&#x60;. - Version 2: is equal to the &#x60;fees_amount_cents&#x60;. - Version 3: is equal to the &#x60;fees_amount_cents&#x60;, minus &#x60;coupons_amount_cents&#x60;
   * @return subTotalExcludingTaxesAmountCents
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUB_TOTAL_EXCLUDING_TAXES_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSubTotalExcludingTaxesAmountCents() {
    return subTotalExcludingTaxesAmountCents;
  }


  @JsonProperty(JSON_PROPERTY_SUB_TOTAL_EXCLUDING_TAXES_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubTotalExcludingTaxesAmountCents(Integer subTotalExcludingTaxesAmountCents) {
    this.subTotalExcludingTaxesAmountCents = subTotalExcludingTaxesAmountCents;
  }


  public InvoiceObject taxesAmountCents(Integer taxesAmountCents) {
    
    this.taxesAmountCents = taxesAmountCents;
    return this;
  }

   /**
   * The sum of tax amount associated with the invoice, expressed in cents.
   * @return taxesAmountCents
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TAXES_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTaxesAmountCents() {
    return taxesAmountCents;
  }


  @JsonProperty(JSON_PROPERTY_TAXES_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTaxesAmountCents(Integer taxesAmountCents) {
    this.taxesAmountCents = taxesAmountCents;
  }


  public InvoiceObject subTotalIncludingTaxesAmountCents(Integer subTotalIncludingTaxesAmountCents) {
    
    this.subTotalIncludingTaxesAmountCents = subTotalIncludingTaxesAmountCents;
    return this;
  }

   /**
   * Subtotal amount, including taxes, expressed in cents. This field depends on the version number. Here are the definitions based on the version: - Version 1: is equal to the &#x60;total_amount_cents&#x60;. - Version 2: is equal to the sum of &#x60;fees_amount_cents&#x60; and &#x60;taxes_amount_cents&#x60;. - Version 3: is equal to the sum &#x60;sub_total_excluding_taxes_amount_cents&#x60; and &#x60;taxes_amount_cents&#x60;
   * @return subTotalIncludingTaxesAmountCents
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUB_TOTAL_INCLUDING_TAXES_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSubTotalIncludingTaxesAmountCents() {
    return subTotalIncludingTaxesAmountCents;
  }


  @JsonProperty(JSON_PROPERTY_SUB_TOTAL_INCLUDING_TAXES_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubTotalIncludingTaxesAmountCents(Integer subTotalIncludingTaxesAmountCents) {
    this.subTotalIncludingTaxesAmountCents = subTotalIncludingTaxesAmountCents;
  }


  public InvoiceObject prepaidCreditAmountCents(Integer prepaidCreditAmountCents) {
    
    this.prepaidCreditAmountCents = prepaidCreditAmountCents;
    return this;
  }

   /**
   * The total sum of all prepaid credits discounted on the invoice. It calculates the cumulative discount amount applied by prepaid credits, expressed in cents.
   * @return prepaidCreditAmountCents
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PREPAID_CREDIT_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPrepaidCreditAmountCents() {
    return prepaidCreditAmountCents;
  }


  @JsonProperty(JSON_PROPERTY_PREPAID_CREDIT_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPrepaidCreditAmountCents(Integer prepaidCreditAmountCents) {
    this.prepaidCreditAmountCents = prepaidCreditAmountCents;
  }


  public InvoiceObject totalAmountCents(Integer totalAmountCents) {
    
    this.totalAmountCents = totalAmountCents;
    return this;
  }

   /**
   * The sum of the amount and taxes amount on the invoice, expressed in cents. It calculates the total financial value of the invoice, including both the original amount and any applicable taxes.
   * @return totalAmountCents
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTotalAmountCents() {
    return totalAmountCents;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalAmountCents(Integer totalAmountCents) {
    this.totalAmountCents = totalAmountCents;
  }


  public InvoiceObject versionNumber(Integer versionNumber) {
    
    this.versionNumber = versionNumber;
    return this;
  }

   /**
   * Get versionNumber
   * @return versionNumber
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERSION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getVersionNumber() {
    return versionNumber;
  }


  @JsonProperty(JSON_PROPERTY_VERSION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
  }


  public InvoiceObject fileUrl(URI fileUrl) {
    
    this.fileUrl = fileUrl;
    return this;
  }

   /**
   * Contains the URL that provides direct access to the invoice PDF file. You can use this URL to download or view the PDF document of the invoice
   * @return fileUrl
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getFileUrl() {
    return fileUrl;
  }


  @JsonProperty(JSON_PROPERTY_FILE_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileUrl(URI fileUrl) {
    this.fileUrl = fileUrl;
  }


  public InvoiceObject customer(InvoiceObjectCustomer customer) {
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InvoiceObjectCustomer getCustomer() {
    return customer;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomer(InvoiceObjectCustomer customer) {
    this.customer = customer;
  }


  public InvoiceObject metadata(List<InvoiceMetadataObject> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public InvoiceObject addMetadataItem(InvoiceMetadataObject metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<InvoiceMetadataObject> getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(List<InvoiceMetadataObject> metadata) {
    this.metadata = metadata;
  }


  public InvoiceObject appliedTaxes(List<InvoiceAppliedTaxObject> appliedTaxes) {
    
    this.appliedTaxes = appliedTaxes;
    return this;
  }

  public InvoiceObject addAppliedTaxesItem(InvoiceAppliedTaxObject appliedTaxesItem) {
    if (this.appliedTaxes == null) {
      this.appliedTaxes = new ArrayList<>();
    }
    this.appliedTaxes.add(appliedTaxesItem);
    return this;
  }

   /**
   * Get appliedTaxes
   * @return appliedTaxes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPLIED_TAXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<InvoiceAppliedTaxObject> getAppliedTaxes() {
    return appliedTaxes;
  }


  @JsonProperty(JSON_PROPERTY_APPLIED_TAXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAppliedTaxes(List<InvoiceAppliedTaxObject> appliedTaxes) {
    this.appliedTaxes = appliedTaxes;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceObject invoiceObject = (InvoiceObject) o;
    return Objects.equals(this.lagoId, invoiceObject.lagoId) &&
        Objects.equals(this.sequentialId, invoiceObject.sequentialId) &&
        Objects.equals(this.number, invoiceObject.number) &&
        Objects.equals(this.issuingDate, invoiceObject.issuingDate) &&
        Objects.equals(this.paymentDueDate, invoiceObject.paymentDueDate) &&
        Objects.equals(this.netPaymentTerm, invoiceObject.netPaymentTerm) &&
        Objects.equals(this.invoiceType, invoiceObject.invoiceType) &&
        Objects.equals(this.status, invoiceObject.status) &&
        Objects.equals(this.paymentStatus, invoiceObject.paymentStatus) &&
        Objects.equals(this.currency, invoiceObject.currency) &&
        Objects.equals(this.feesAmountCents, invoiceObject.feesAmountCents) &&
        Objects.equals(this.couponsAmountCents, invoiceObject.couponsAmountCents) &&
        Objects.equals(this.creditNotesAmountCents, invoiceObject.creditNotesAmountCents) &&
        Objects.equals(this.subTotalExcludingTaxesAmountCents, invoiceObject.subTotalExcludingTaxesAmountCents) &&
        Objects.equals(this.taxesAmountCents, invoiceObject.taxesAmountCents) &&
        Objects.equals(this.subTotalIncludingTaxesAmountCents, invoiceObject.subTotalIncludingTaxesAmountCents) &&
        Objects.equals(this.prepaidCreditAmountCents, invoiceObject.prepaidCreditAmountCents) &&
        Objects.equals(this.totalAmountCents, invoiceObject.totalAmountCents) &&
        Objects.equals(this.versionNumber, invoiceObject.versionNumber) &&
        Objects.equals(this.fileUrl, invoiceObject.fileUrl) &&
        Objects.equals(this.customer, invoiceObject.customer) &&
        Objects.equals(this.metadata, invoiceObject.metadata) &&
        Objects.equals(this.appliedTaxes, invoiceObject.appliedTaxes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lagoId, sequentialId, number, issuingDate, paymentDueDate, netPaymentTerm, invoiceType, status, paymentStatus, currency, feesAmountCents, couponsAmountCents, creditNotesAmountCents, subTotalExcludingTaxesAmountCents, taxesAmountCents, subTotalIncludingTaxesAmountCents, prepaidCreditAmountCents, totalAmountCents, versionNumber, fileUrl, customer, metadata, appliedTaxes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceObject {\n");
    sb.append("    lagoId: ").append(toIndentedString(lagoId)).append("\n");
    sb.append("    sequentialId: ").append(toIndentedString(sequentialId)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    issuingDate: ").append(toIndentedString(issuingDate)).append("\n");
    sb.append("    paymentDueDate: ").append(toIndentedString(paymentDueDate)).append("\n");
    sb.append("    netPaymentTerm: ").append(toIndentedString(netPaymentTerm)).append("\n");
    sb.append("    invoiceType: ").append(toIndentedString(invoiceType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    feesAmountCents: ").append(toIndentedString(feesAmountCents)).append("\n");
    sb.append("    couponsAmountCents: ").append(toIndentedString(couponsAmountCents)).append("\n");
    sb.append("    creditNotesAmountCents: ").append(toIndentedString(creditNotesAmountCents)).append("\n");
    sb.append("    subTotalExcludingTaxesAmountCents: ").append(toIndentedString(subTotalExcludingTaxesAmountCents)).append("\n");
    sb.append("    taxesAmountCents: ").append(toIndentedString(taxesAmountCents)).append("\n");
    sb.append("    subTotalIncludingTaxesAmountCents: ").append(toIndentedString(subTotalIncludingTaxesAmountCents)).append("\n");
    sb.append("    prepaidCreditAmountCents: ").append(toIndentedString(prepaidCreditAmountCents)).append("\n");
    sb.append("    totalAmountCents: ").append(toIndentedString(totalAmountCents)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    fileUrl: ").append(toIndentedString(fileUrl)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    appliedTaxes: ").append(toIndentedString(appliedTaxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

