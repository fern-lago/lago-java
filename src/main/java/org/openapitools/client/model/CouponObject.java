/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.53.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Currency;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CouponObject
 */
@JsonPropertyOrder({
  CouponObject.JSON_PROPERTY_LAGO_ID,
  CouponObject.JSON_PROPERTY_NAME,
  CouponObject.JSON_PROPERTY_CODE,
  CouponObject.JSON_PROPERTY_DESCRIPTION,
  CouponObject.JSON_PROPERTY_COUPON_TYPE,
  CouponObject.JSON_PROPERTY_AMOUNT_CENTS,
  CouponObject.JSON_PROPERTY_AMOUNT_CURRENCY,
  CouponObject.JSON_PROPERTY_REUSABLE,
  CouponObject.JSON_PROPERTY_LIMITED_PLANS,
  CouponObject.JSON_PROPERTY_PLAN_CODES,
  CouponObject.JSON_PROPERTY_LIMITED_BILLABLE_METRICS,
  CouponObject.JSON_PROPERTY_BILLABLE_METRIC_CODES,
  CouponObject.JSON_PROPERTY_PERCENTAGE_RATE,
  CouponObject.JSON_PROPERTY_FREQUENCY,
  CouponObject.JSON_PROPERTY_FREQUENCY_DURATION,
  CouponObject.JSON_PROPERTY_EXPIRATION,
  CouponObject.JSON_PROPERTY_EXPIRATION_AT,
  CouponObject.JSON_PROPERTY_CREATED_AT,
  CouponObject.JSON_PROPERTY_TERMINATED_AT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-27T14:12:55.372025191Z[Etc/UTC]")
public class CouponObject {
  public static final String JSON_PROPERTY_LAGO_ID = "lago_id";
  private UUID lagoId;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private JsonNullable<String> description = JsonNullable.<String>undefined();

  /**
   * The type of the coupon. It can have two possible values: &#x60;fixed_amount&#x60; or &#x60;percentage&#x60;.  - If set to &#x60;fixed_amount&#x60;, the coupon represents a fixed amount discount. - If set to &#x60;percentage&#x60;, the coupon represents a percentage-based discount.
   */
  public enum CouponTypeEnum {
    FIXED_AMOUNT("fixed_amount"),
    
    PERCENTAGE("percentage");

    private String value;

    CouponTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CouponTypeEnum fromValue(String value) {
      for (CouponTypeEnum b : CouponTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_COUPON_TYPE = "coupon_type";
  private CouponTypeEnum couponType;

  public static final String JSON_PROPERTY_AMOUNT_CENTS = "amount_cents";
  private JsonNullable<Integer> amountCents = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_AMOUNT_CURRENCY = "amount_currency";
  private Currency amountCurrency;

  public static final String JSON_PROPERTY_REUSABLE = "reusable";
  private Boolean reusable;

  public static final String JSON_PROPERTY_LIMITED_PLANS = "limited_plans";
  private Boolean limitedPlans;

  public static final String JSON_PROPERTY_PLAN_CODES = "plan_codes";
  private List<String> planCodes;

  public static final String JSON_PROPERTY_LIMITED_BILLABLE_METRICS = "limited_billable_metrics";
  private Boolean limitedBillableMetrics;

  public static final String JSON_PROPERTY_BILLABLE_METRIC_CODES = "billable_metric_codes";
  private List<String> billableMetricCodes;

  public static final String JSON_PROPERTY_PERCENTAGE_RATE = "percentage_rate";
  private JsonNullable<String> percentageRate = JsonNullable.<String>undefined();

  /**
   * The type of frequency for the coupon. It can have three possible values: &#x60;once&#x60;, &#x60;recurring&#x60;, or &#x60;forever&#x60;.  - If set to &#x60;once&#x60;, the coupon is applicable only for a single use. - If set to &#x60;recurring&#x60;, the coupon can be used multiple times for recurring billing periods. - If set to &#x60;forever&#x60;, the coupon has unlimited usage and can be applied indefinitely.
   */
  public enum FrequencyEnum {
    ONCE("once"),
    
    RECURRING("recurring");

    private String value;

    FrequencyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FrequencyEnum fromValue(String value) {
      for (FrequencyEnum b : FrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FREQUENCY = "frequency";
  private FrequencyEnum frequency;

  public static final String JSON_PROPERTY_FREQUENCY_DURATION = "frequency_duration";
  private JsonNullable<Integer> frequencyDuration = JsonNullable.<Integer>undefined();

  /**
   * Specifies the type of expiration for the coupon. It can have two possible values: &#x60;time_limit&#x60; or &#x60;no_expiration&#x60;.  - If set to &#x60;time_limit&#x60;, the coupon has an expiration based on a specified time limit. - If set to &#x60;no_expiration&#x60;, the coupon does not have an expiration date and remains valid indefinitely.
   */
  public enum ExpirationEnum {
    NO_EXPIRATION("no_expiration"),
    
    TIME_LIMIT("time_limit");

    private String value;

    ExpirationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ExpirationEnum fromValue(String value) {
      for (ExpirationEnum b : ExpirationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EXPIRATION = "expiration";
  private ExpirationEnum expiration;

  public static final String JSON_PROPERTY_EXPIRATION_AT = "expiration_at";
  private JsonNullable<OffsetDateTime> expirationAt = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_TERMINATED_AT = "terminated_at";
  private OffsetDateTime terminatedAt;

  public CouponObject() {
  }

  public CouponObject lagoId(UUID lagoId) {
    
    this.lagoId = lagoId;
    return this;
  }

   /**
   * Unique identifier of the coupon, created by Lago.
   * @return lagoId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LAGO_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getLagoId() {
    return lagoId;
  }


  @JsonProperty(JSON_PROPERTY_LAGO_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLagoId(UUID lagoId) {
    this.lagoId = lagoId;
  }


  public CouponObject name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the coupon.
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public CouponObject code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Unique code used to identify the coupon.
   * @return code
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(String code) {
    this.code = code;
  }


  public CouponObject description(String description) {
    this.description = JsonNullable.<String>of(description);
    
    return this;
  }

   /**
   * Description of the coupon.
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getDescription() {
        return description.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDescription_JsonNullable() {
    return description;
  }
  
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  public void setDescription_JsonNullable(JsonNullable<String> description) {
    this.description = description;
  }

  public void setDescription(String description) {
    this.description = JsonNullable.<String>of(description);
  }


  public CouponObject couponType(CouponTypeEnum couponType) {
    
    this.couponType = couponType;
    return this;
  }

   /**
   * The type of the coupon. It can have two possible values: &#x60;fixed_amount&#x60; or &#x60;percentage&#x60;.  - If set to &#x60;fixed_amount&#x60;, the coupon represents a fixed amount discount. - If set to &#x60;percentage&#x60;, the coupon represents a percentage-based discount.
   * @return couponType
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUPON_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CouponTypeEnum getCouponType() {
    return couponType;
  }


  @JsonProperty(JSON_PROPERTY_COUPON_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCouponType(CouponTypeEnum couponType) {
    this.couponType = couponType;
  }


  public CouponObject amountCents(Integer amountCents) {
    this.amountCents = JsonNullable.<Integer>of(amountCents);
    
    return this;
  }

   /**
   * The amount of the coupon in cents. This field is required only for coupon with &#x60;fixed_amount&#x60; type.
   * @return amountCents
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getAmountCents() {
        return amountCents.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getAmountCents_JsonNullable() {
    return amountCents;
  }
  
  @JsonProperty(JSON_PROPERTY_AMOUNT_CENTS)
  public void setAmountCents_JsonNullable(JsonNullable<Integer> amountCents) {
    this.amountCents = amountCents;
  }

  public void setAmountCents(Integer amountCents) {
    this.amountCents = JsonNullable.<Integer>of(amountCents);
  }


  public CouponObject amountCurrency(Currency amountCurrency) {
    
    this.amountCurrency = amountCurrency;
    return this;
  }

   /**
   * Get amountCurrency
   * @return amountCurrency
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Currency getAmountCurrency() {
    return amountCurrency;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmountCurrency(Currency amountCurrency) {
    this.amountCurrency = amountCurrency;
  }


  public CouponObject reusable(Boolean reusable) {
    
    this.reusable = reusable;
    return this;
  }

   /**
   * Indicates whether the coupon can be reused or not. If set to &#x60;true&#x60;, the coupon is reusable, meaning it can be applied multiple times to the same customer. If set to &#x60;false&#x60;, the coupon can only be used once and is not reusable. If not specified, this field is set to &#x60;true&#x60; by default.
   * @return reusable
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REUSABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getReusable() {
    return reusable;
  }


  @JsonProperty(JSON_PROPERTY_REUSABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReusable(Boolean reusable) {
    this.reusable = reusable;
  }


  public CouponObject limitedPlans(Boolean limitedPlans) {
    
    this.limitedPlans = limitedPlans;
    return this;
  }

   /**
   * The coupon is limited to specific plans. The possible values can be &#x60;true&#x60; or &#x60;false&#x60;.
   * @return limitedPlans
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LIMITED_PLANS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getLimitedPlans() {
    return limitedPlans;
  }


  @JsonProperty(JSON_PROPERTY_LIMITED_PLANS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLimitedPlans(Boolean limitedPlans) {
    this.limitedPlans = limitedPlans;
  }


  public CouponObject planCodes(List<String> planCodes) {
    
    this.planCodes = planCodes;
    return this;
  }

  public CouponObject addPlanCodesItem(String planCodesItem) {
    if (this.planCodes == null) {
      this.planCodes = new ArrayList<>();
    }
    this.planCodes.add(planCodesItem);
    return this;
  }

   /**
   * An array of plan codes to which the coupon is applicable. By specifying the plan codes in this field, you can restrict the coupon&#39;s usage to specific plans only.
   * @return planCodes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAN_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getPlanCodes() {
    return planCodes;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanCodes(List<String> planCodes) {
    this.planCodes = planCodes;
  }


  public CouponObject limitedBillableMetrics(Boolean limitedBillableMetrics) {
    
    this.limitedBillableMetrics = limitedBillableMetrics;
    return this;
  }

   /**
   * The coupon is limited to specific billable metrics. The possible values can be &#x60;true&#x60; or &#x60;false&#x60;.
   * @return limitedBillableMetrics
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LIMITED_BILLABLE_METRICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getLimitedBillableMetrics() {
    return limitedBillableMetrics;
  }


  @JsonProperty(JSON_PROPERTY_LIMITED_BILLABLE_METRICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLimitedBillableMetrics(Boolean limitedBillableMetrics) {
    this.limitedBillableMetrics = limitedBillableMetrics;
  }


  public CouponObject billableMetricCodes(List<String> billableMetricCodes) {
    
    this.billableMetricCodes = billableMetricCodes;
    return this;
  }

  public CouponObject addBillableMetricCodesItem(String billableMetricCodesItem) {
    if (this.billableMetricCodes == null) {
      this.billableMetricCodes = new ArrayList<>();
    }
    this.billableMetricCodes.add(billableMetricCodesItem);
    return this;
  }

   /**
   * An array of billable metric codes to which the coupon is applicable. By specifying the billable metric codes in this field, you can restrict the coupon&#39;s usage to specific metrics only.
   * @return billableMetricCodes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BILLABLE_METRIC_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getBillableMetricCodes() {
    return billableMetricCodes;
  }


  @JsonProperty(JSON_PROPERTY_BILLABLE_METRIC_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBillableMetricCodes(List<String> billableMetricCodes) {
    this.billableMetricCodes = billableMetricCodes;
  }


  public CouponObject percentageRate(String percentageRate) {
    this.percentageRate = JsonNullable.<String>of(percentageRate);
    
    return this;
  }

   /**
   * The percentage rate of the coupon. This field is required only for coupons with a &#x60;percentage&#x60; coupon type.
   * @return percentageRate
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getPercentageRate() {
        return percentageRate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PERCENTAGE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPercentageRate_JsonNullable() {
    return percentageRate;
  }
  
  @JsonProperty(JSON_PROPERTY_PERCENTAGE_RATE)
  public void setPercentageRate_JsonNullable(JsonNullable<String> percentageRate) {
    this.percentageRate = percentageRate;
  }

  public void setPercentageRate(String percentageRate) {
    this.percentageRate = JsonNullable.<String>of(percentageRate);
  }


  public CouponObject frequency(FrequencyEnum frequency) {
    
    this.frequency = frequency;
    return this;
  }

   /**
   * The type of frequency for the coupon. It can have three possible values: &#x60;once&#x60;, &#x60;recurring&#x60;, or &#x60;forever&#x60;.  - If set to &#x60;once&#x60;, the coupon is applicable only for a single use. - If set to &#x60;recurring&#x60;, the coupon can be used multiple times for recurring billing periods. - If set to &#x60;forever&#x60;, the coupon has unlimited usage and can be applied indefinitely.
   * @return frequency
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FrequencyEnum getFrequency() {
    return frequency;
  }


  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFrequency(FrequencyEnum frequency) {
    this.frequency = frequency;
  }


  public CouponObject frequencyDuration(Integer frequencyDuration) {
    this.frequencyDuration = JsonNullable.<Integer>of(frequencyDuration);
    
    return this;
  }

   /**
   * Specifies the number of billing periods to which the coupon applies. This field is required only for coupons with a &#x60;recurring&#x60; frequency type
   * @return frequencyDuration
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getFrequencyDuration() {
        return frequencyDuration.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FREQUENCY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getFrequencyDuration_JsonNullable() {
    return frequencyDuration;
  }
  
  @JsonProperty(JSON_PROPERTY_FREQUENCY_DURATION)
  public void setFrequencyDuration_JsonNullable(JsonNullable<Integer> frequencyDuration) {
    this.frequencyDuration = frequencyDuration;
  }

  public void setFrequencyDuration(Integer frequencyDuration) {
    this.frequencyDuration = JsonNullable.<Integer>of(frequencyDuration);
  }


  public CouponObject expiration(ExpirationEnum expiration) {
    
    this.expiration = expiration;
    return this;
  }

   /**
   * Specifies the type of expiration for the coupon. It can have two possible values: &#x60;time_limit&#x60; or &#x60;no_expiration&#x60;.  - If set to &#x60;time_limit&#x60;, the coupon has an expiration based on a specified time limit. - If set to &#x60;no_expiration&#x60;, the coupon does not have an expiration date and remains valid indefinitely.
   * @return expiration
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ExpirationEnum getExpiration() {
    return expiration;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpiration(ExpirationEnum expiration) {
    this.expiration = expiration;
  }


  public CouponObject expirationAt(OffsetDateTime expirationAt) {
    this.expirationAt = JsonNullable.<OffsetDateTime>of(expirationAt);
    
    return this;
  }

   /**
   * The expiration date and time of the coupon. This field is required only for coupons with &#x60;expiration&#x60; set to &#x60;time_limit&#x60;. The expiration date and time should be specified in UTC format according to the ISO 8601 datetime standard. It indicates the exact moment when the coupon will expire and is no longer valid.
   * @return expirationAt
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getExpirationAt() {
        return expirationAt.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXPIRATION_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getExpirationAt_JsonNullable() {
    return expirationAt;
  }
  
  @JsonProperty(JSON_PROPERTY_EXPIRATION_AT)
  public void setExpirationAt_JsonNullable(JsonNullable<OffsetDateTime> expirationAt) {
    this.expirationAt = expirationAt;
  }

  public void setExpirationAt(OffsetDateTime expirationAt) {
    this.expirationAt = JsonNullable.<OffsetDateTime>of(expirationAt);
  }


  public CouponObject createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time when the coupon was created. It is expressed in UTC format according to the ISO 8601 datetime standard. This field provides the timestamp for the exact moment when the coupon was initially created.
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CouponObject terminatedAt(OffsetDateTime terminatedAt) {
    
    this.terminatedAt = terminatedAt;
    return this;
  }

   /**
   * This field indicates if the coupon has been terminated and is no longer usable. If it&#39;s not null, it won&#39;t be removed for existing customers using it, but it prevents the coupon from being applied in the future.
   * @return terminatedAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getTerminatedAt() {
    return terminatedAt;
  }


  @JsonProperty(JSON_PROPERTY_TERMINATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminatedAt(OffsetDateTime terminatedAt) {
    this.terminatedAt = terminatedAt;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CouponObject couponObject = (CouponObject) o;
    return Objects.equals(this.lagoId, couponObject.lagoId) &&
        Objects.equals(this.name, couponObject.name) &&
        Objects.equals(this.code, couponObject.code) &&
        equalsNullable(this.description, couponObject.description) &&
        Objects.equals(this.couponType, couponObject.couponType) &&
        equalsNullable(this.amountCents, couponObject.amountCents) &&
        Objects.equals(this.amountCurrency, couponObject.amountCurrency) &&
        Objects.equals(this.reusable, couponObject.reusable) &&
        Objects.equals(this.limitedPlans, couponObject.limitedPlans) &&
        Objects.equals(this.planCodes, couponObject.planCodes) &&
        Objects.equals(this.limitedBillableMetrics, couponObject.limitedBillableMetrics) &&
        Objects.equals(this.billableMetricCodes, couponObject.billableMetricCodes) &&
        equalsNullable(this.percentageRate, couponObject.percentageRate) &&
        Objects.equals(this.frequency, couponObject.frequency) &&
        equalsNullable(this.frequencyDuration, couponObject.frequencyDuration) &&
        Objects.equals(this.expiration, couponObject.expiration) &&
        equalsNullable(this.expirationAt, couponObject.expirationAt) &&
        Objects.equals(this.createdAt, couponObject.createdAt) &&
        Objects.equals(this.terminatedAt, couponObject.terminatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(lagoId, name, code, hashCodeNullable(description), couponType, hashCodeNullable(amountCents), amountCurrency, reusable, limitedPlans, planCodes, limitedBillableMetrics, billableMetricCodes, hashCodeNullable(percentageRate), frequency, hashCodeNullable(frequencyDuration), expiration, hashCodeNullable(expirationAt), createdAt, terminatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponObject {\n");
    sb.append("    lagoId: ").append(toIndentedString(lagoId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    couponType: ").append(toIndentedString(couponType)).append("\n");
    sb.append("    amountCents: ").append(toIndentedString(amountCents)).append("\n");
    sb.append("    amountCurrency: ").append(toIndentedString(amountCurrency)).append("\n");
    sb.append("    reusable: ").append(toIndentedString(reusable)).append("\n");
    sb.append("    limitedPlans: ").append(toIndentedString(limitedPlans)).append("\n");
    sb.append("    planCodes: ").append(toIndentedString(planCodes)).append("\n");
    sb.append("    limitedBillableMetrics: ").append(toIndentedString(limitedBillableMetrics)).append("\n");
    sb.append("    billableMetricCodes: ").append(toIndentedString(billableMetricCodes)).append("\n");
    sb.append("    percentageRate: ").append(toIndentedString(percentageRate)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    frequencyDuration: ").append(toIndentedString(frequencyDuration)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    expirationAt: ").append(toIndentedString(expirationAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    terminatedAt: ").append(toIndentedString(terminatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

