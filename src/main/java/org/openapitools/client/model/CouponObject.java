/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.46.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Currency;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CouponObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-31T09:20:28.589842Z[Etc/UTC]")
public class CouponObject {
  public static final String SERIALIZED_NAME_LAGO_ID = "lago_id";
  @SerializedName(SERIALIZED_NAME_LAGO_ID)
  private UUID lagoId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The type of the coupon. It can have two possible values: &#x60;fixed_amount&#x60; or &#x60;percentage&#x60;.  - If set to &#x60;fixed_amount&#x60;, the coupon represents a fixed amount discount. - If set to &#x60;percentage&#x60;, the coupon represents a percentage-based discount.
   */
  @JsonAdapter(CouponTypeEnum.Adapter.class)
  public enum CouponTypeEnum {
    FIXED_AMOUNT("fixed_amount"),
    
    PERCENTAGE("percentage");

    private String value;

    CouponTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CouponTypeEnum fromValue(String value) {
      for (CouponTypeEnum b : CouponTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CouponTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CouponTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CouponTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CouponTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COUPON_TYPE = "coupon_type";
  @SerializedName(SERIALIZED_NAME_COUPON_TYPE)
  private CouponTypeEnum couponType;

  public static final String SERIALIZED_NAME_AMOUNT_CENTS = "amount_cents";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CENTS)
  private Integer amountCents;

  public static final String SERIALIZED_NAME_AMOUNT_CURRENCY = "amount_currency";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CURRENCY)
  private Currency amountCurrency;

  public static final String SERIALIZED_NAME_REUSABLE = "reusable";
  @SerializedName(SERIALIZED_NAME_REUSABLE)
  private Boolean reusable;

  public static final String SERIALIZED_NAME_LIMITED_PLANS = "limited_plans";
  @SerializedName(SERIALIZED_NAME_LIMITED_PLANS)
  private Boolean limitedPlans;

  public static final String SERIALIZED_NAME_PLAN_CODES = "plan_codes";
  @SerializedName(SERIALIZED_NAME_PLAN_CODES)
  private List<String> planCodes;

  public static final String SERIALIZED_NAME_LIMITED_BILLABLE_METRICS = "limited_billable_metrics";
  @SerializedName(SERIALIZED_NAME_LIMITED_BILLABLE_METRICS)
  private Boolean limitedBillableMetrics;

  public static final String SERIALIZED_NAME_BILLABLE_METRIC_CODES = "billable_metric_codes";
  @SerializedName(SERIALIZED_NAME_BILLABLE_METRIC_CODES)
  private List<String> billableMetricCodes;

  public static final String SERIALIZED_NAME_PERCENTAGE_RATE = "percentage_rate";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_RATE)
  private String percentageRate;

  /**
   * The type of frequency for the coupon. It can have three possible values: &#x60;once&#x60;, &#x60;recurring&#x60;, or &#x60;forever&#x60;.  - If set to &#x60;once&#x60;, the coupon is applicable only for a single use. - If set to &#x60;recurring&#x60;, the coupon can be used multiple times for recurring billing periods. - If set to &#x60;forever&#x60;, the coupon has unlimited usage and can be applied indefinitely.
   */
  @JsonAdapter(FrequencyEnum.Adapter.class)
  public enum FrequencyEnum {
    ONCE("once"),
    
    RECURRING("recurring");

    private String value;

    FrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FrequencyEnum fromValue(String value) {
      for (FrequencyEnum b : FrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FrequencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private FrequencyEnum frequency;

  public static final String SERIALIZED_NAME_FREQUENCY_DURATION = "frequency_duration";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_DURATION)
  private Integer frequencyDuration;

  /**
   * Specifies the type of expiration for the coupon. It can have two possible values: &#x60;time_limit&#x60; or &#x60;no_expiration&#x60;.  - If set to &#x60;time_limit&#x60;, the coupon has an expiration based on a specified time limit. - If set to &#x60;no_expiration&#x60;, the coupon does not have an expiration date and remains valid indefinitely.
   */
  @JsonAdapter(ExpirationEnum.Adapter.class)
  public enum ExpirationEnum {
    NO_EXPIRATION("no_expiration"),
    
    TIME_LIMIT("time_limit");

    private String value;

    ExpirationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpirationEnum fromValue(String value) {
      for (ExpirationEnum b : ExpirationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpirationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpirationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpirationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpirationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private ExpirationEnum expiration;

  public static final String SERIALIZED_NAME_EXPIRATION_AT = "expiration_at";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_AT)
  private OffsetDateTime expirationAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public CouponObject() {
  }

  public CouponObject lagoId(UUID lagoId) {
    
    this.lagoId = lagoId;
    return this;
  }

   /**
   * Unique identifier of the coupon, created by Lago.
   * @return lagoId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoId() {
    return lagoId;
  }


  public void setLagoId(UUID lagoId) {
    this.lagoId = lagoId;
  }


  public CouponObject name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the coupon.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CouponObject code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Unique code used to identify the coupon.
   * @return code
  **/
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public CouponObject description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the coupon.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CouponObject couponType(CouponTypeEnum couponType) {
    
    this.couponType = couponType;
    return this;
  }

   /**
   * The type of the coupon. It can have two possible values: &#x60;fixed_amount&#x60; or &#x60;percentage&#x60;.  - If set to &#x60;fixed_amount&#x60;, the coupon represents a fixed amount discount. - If set to &#x60;percentage&#x60;, the coupon represents a percentage-based discount.
   * @return couponType
  **/
  @javax.annotation.Nonnull
  public CouponTypeEnum getCouponType() {
    return couponType;
  }


  public void setCouponType(CouponTypeEnum couponType) {
    this.couponType = couponType;
  }


  public CouponObject amountCents(Integer amountCents) {
    
    this.amountCents = amountCents;
    return this;
  }

   /**
   * The amount of the coupon in cents. This field is required only for coupon with &#x60;fixed_amount&#x60; type.
   * @return amountCents
  **/
  @javax.annotation.Nullable
  public Integer getAmountCents() {
    return amountCents;
  }


  public void setAmountCents(Integer amountCents) {
    this.amountCents = amountCents;
  }


  public CouponObject amountCurrency(Currency amountCurrency) {
    
    this.amountCurrency = amountCurrency;
    return this;
  }

   /**
   * Get amountCurrency
   * @return amountCurrency
  **/
  @javax.annotation.Nullable
  public Currency getAmountCurrency() {
    return amountCurrency;
  }


  public void setAmountCurrency(Currency amountCurrency) {
    this.amountCurrency = amountCurrency;
  }


  public CouponObject reusable(Boolean reusable) {
    
    this.reusable = reusable;
    return this;
  }

   /**
   * Indicates whether the coupon can be reused or not. If set to &#x60;true&#x60;, the coupon is reusable, meaning it can be applied multiple times to the same customer. If set to &#x60;false&#x60;, the coupon can only be used once and is not reusable. If not specified, this field is set to &#x60;true&#x60; by default.
   * @return reusable
  **/
  @javax.annotation.Nonnull
  public Boolean getReusable() {
    return reusable;
  }


  public void setReusable(Boolean reusable) {
    this.reusable = reusable;
  }


  public CouponObject limitedPlans(Boolean limitedPlans) {
    
    this.limitedPlans = limitedPlans;
    return this;
  }

   /**
   * The coupon is limited to specific plans. The possible values can be &#x60;true&#x60; or &#x60;false&#x60;.
   * @return limitedPlans
  **/
  @javax.annotation.Nonnull
  public Boolean getLimitedPlans() {
    return limitedPlans;
  }


  public void setLimitedPlans(Boolean limitedPlans) {
    this.limitedPlans = limitedPlans;
  }


  public CouponObject planCodes(List<String> planCodes) {
    
    this.planCodes = planCodes;
    return this;
  }

  public CouponObject addPlanCodesItem(String planCodesItem) {
    if (this.planCodes == null) {
      this.planCodes = new ArrayList<>();
    }
    this.planCodes.add(planCodesItem);
    return this;
  }

   /**
   * An array of plan codes to which the coupon is applicable. By specifying the plan codes in this field, you can restrict the coupon&#39;s usage to specific plans only.
   * @return planCodes
  **/
  @javax.annotation.Nullable
  public List<String> getPlanCodes() {
    return planCodes;
  }


  public void setPlanCodes(List<String> planCodes) {
    this.planCodes = planCodes;
  }


  public CouponObject limitedBillableMetrics(Boolean limitedBillableMetrics) {
    
    this.limitedBillableMetrics = limitedBillableMetrics;
    return this;
  }

   /**
   * The coupon is limited to specific billable metrics. The possible values can be &#x60;true&#x60; or &#x60;false&#x60;.
   * @return limitedBillableMetrics
  **/
  @javax.annotation.Nonnull
  public Boolean getLimitedBillableMetrics() {
    return limitedBillableMetrics;
  }


  public void setLimitedBillableMetrics(Boolean limitedBillableMetrics) {
    this.limitedBillableMetrics = limitedBillableMetrics;
  }


  public CouponObject billableMetricCodes(List<String> billableMetricCodes) {
    
    this.billableMetricCodes = billableMetricCodes;
    return this;
  }

  public CouponObject addBillableMetricCodesItem(String billableMetricCodesItem) {
    if (this.billableMetricCodes == null) {
      this.billableMetricCodes = new ArrayList<>();
    }
    this.billableMetricCodes.add(billableMetricCodesItem);
    return this;
  }

   /**
   * An array of billable metric codes to which the coupon is applicable. By specifying the billable metric codes in this field, you can restrict the coupon&#39;s usage to specific metrics only.
   * @return billableMetricCodes
  **/
  @javax.annotation.Nullable
  public List<String> getBillableMetricCodes() {
    return billableMetricCodes;
  }


  public void setBillableMetricCodes(List<String> billableMetricCodes) {
    this.billableMetricCodes = billableMetricCodes;
  }


  public CouponObject percentageRate(String percentageRate) {
    
    this.percentageRate = percentageRate;
    return this;
  }

   /**
   * The percentage rate of the coupon. This field is required only for coupons with a &#x60;percentage&#x60; coupon type.
   * @return percentageRate
  **/
  @javax.annotation.Nullable
  public String getPercentageRate() {
    return percentageRate;
  }


  public void setPercentageRate(String percentageRate) {
    this.percentageRate = percentageRate;
  }


  public CouponObject frequency(FrequencyEnum frequency) {
    
    this.frequency = frequency;
    return this;
  }

   /**
   * The type of frequency for the coupon. It can have three possible values: &#x60;once&#x60;, &#x60;recurring&#x60;, or &#x60;forever&#x60;.  - If set to &#x60;once&#x60;, the coupon is applicable only for a single use. - If set to &#x60;recurring&#x60;, the coupon can be used multiple times for recurring billing periods. - If set to &#x60;forever&#x60;, the coupon has unlimited usage and can be applied indefinitely.
   * @return frequency
  **/
  @javax.annotation.Nonnull
  public FrequencyEnum getFrequency() {
    return frequency;
  }


  public void setFrequency(FrequencyEnum frequency) {
    this.frequency = frequency;
  }


  public CouponObject frequencyDuration(Integer frequencyDuration) {
    
    this.frequencyDuration = frequencyDuration;
    return this;
  }

   /**
   * Specifies the number of billing periods to which the coupon applies. This field is required only for coupons with a &#x60;recurring&#x60; frequency type
   * @return frequencyDuration
  **/
  @javax.annotation.Nullable
  public Integer getFrequencyDuration() {
    return frequencyDuration;
  }


  public void setFrequencyDuration(Integer frequencyDuration) {
    this.frequencyDuration = frequencyDuration;
  }


  public CouponObject expiration(ExpirationEnum expiration) {
    
    this.expiration = expiration;
    return this;
  }

   /**
   * Specifies the type of expiration for the coupon. It can have two possible values: &#x60;time_limit&#x60; or &#x60;no_expiration&#x60;.  - If set to &#x60;time_limit&#x60;, the coupon has an expiration based on a specified time limit. - If set to &#x60;no_expiration&#x60;, the coupon does not have an expiration date and remains valid indefinitely.
   * @return expiration
  **/
  @javax.annotation.Nonnull
  public ExpirationEnum getExpiration() {
    return expiration;
  }


  public void setExpiration(ExpirationEnum expiration) {
    this.expiration = expiration;
  }


  public CouponObject expirationAt(OffsetDateTime expirationAt) {
    
    this.expirationAt = expirationAt;
    return this;
  }

   /**
   * The expiration date and time of the coupon. This field is required only for coupons with &#x60;expiration&#x60; set to &#x60;time_limit&#x60;. The expiration date and time should be specified in UTC format according to the ISO 8601 datetime standard. It indicates the exact moment when the coupon will expire and is no longer valid.
   * @return expirationAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationAt() {
    return expirationAt;
  }


  public void setExpirationAt(OffsetDateTime expirationAt) {
    this.expirationAt = expirationAt;
  }


  public CouponObject createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time when the coupon was created. It is expressed in UTC format according to the ISO 8601 datetime standard. This field provides the timestamp for the exact moment when the coupon was initially created.
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CouponObject couponObject = (CouponObject) o;
    return Objects.equals(this.lagoId, couponObject.lagoId) &&
        Objects.equals(this.name, couponObject.name) &&
        Objects.equals(this.code, couponObject.code) &&
        Objects.equals(this.description, couponObject.description) &&
        Objects.equals(this.couponType, couponObject.couponType) &&
        Objects.equals(this.amountCents, couponObject.amountCents) &&
        Objects.equals(this.amountCurrency, couponObject.amountCurrency) &&
        Objects.equals(this.reusable, couponObject.reusable) &&
        Objects.equals(this.limitedPlans, couponObject.limitedPlans) &&
        Objects.equals(this.planCodes, couponObject.planCodes) &&
        Objects.equals(this.limitedBillableMetrics, couponObject.limitedBillableMetrics) &&
        Objects.equals(this.billableMetricCodes, couponObject.billableMetricCodes) &&
        Objects.equals(this.percentageRate, couponObject.percentageRate) &&
        Objects.equals(this.frequency, couponObject.frequency) &&
        Objects.equals(this.frequencyDuration, couponObject.frequencyDuration) &&
        Objects.equals(this.expiration, couponObject.expiration) &&
        Objects.equals(this.expirationAt, couponObject.expirationAt) &&
        Objects.equals(this.createdAt, couponObject.createdAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(lagoId, name, code, description, couponType, amountCents, amountCurrency, reusable, limitedPlans, planCodes, limitedBillableMetrics, billableMetricCodes, percentageRate, frequency, frequencyDuration, expiration, expirationAt, createdAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponObject {\n");
    sb.append("    lagoId: ").append(toIndentedString(lagoId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    couponType: ").append(toIndentedString(couponType)).append("\n");
    sb.append("    amountCents: ").append(toIndentedString(amountCents)).append("\n");
    sb.append("    amountCurrency: ").append(toIndentedString(amountCurrency)).append("\n");
    sb.append("    reusable: ").append(toIndentedString(reusable)).append("\n");
    sb.append("    limitedPlans: ").append(toIndentedString(limitedPlans)).append("\n");
    sb.append("    planCodes: ").append(toIndentedString(planCodes)).append("\n");
    sb.append("    limitedBillableMetrics: ").append(toIndentedString(limitedBillableMetrics)).append("\n");
    sb.append("    billableMetricCodes: ").append(toIndentedString(billableMetricCodes)).append("\n");
    sb.append("    percentageRate: ").append(toIndentedString(percentageRate)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    frequencyDuration: ").append(toIndentedString(frequencyDuration)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    expirationAt: ").append(toIndentedString(expirationAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lago_id");
    openapiFields.add("name");
    openapiFields.add("code");
    openapiFields.add("description");
    openapiFields.add("coupon_type");
    openapiFields.add("amount_cents");
    openapiFields.add("amount_currency");
    openapiFields.add("reusable");
    openapiFields.add("limited_plans");
    openapiFields.add("plan_codes");
    openapiFields.add("limited_billable_metrics");
    openapiFields.add("billable_metric_codes");
    openapiFields.add("percentage_rate");
    openapiFields.add("frequency");
    openapiFields.add("frequency_duration");
    openapiFields.add("expiration");
    openapiFields.add("expiration_at");
    openapiFields.add("created_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lago_id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("coupon_type");
    openapiRequiredFields.add("reusable");
    openapiRequiredFields.add("limited_plans");
    openapiRequiredFields.add("limited_billable_metrics");
    openapiRequiredFields.add("frequency");
    openapiRequiredFields.add("expiration");
    openapiRequiredFields.add("created_at");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CouponObject
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CouponObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CouponObject is not found in the empty JSON string", CouponObject.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CouponObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CouponObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CouponObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("lago_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("coupon_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coupon_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coupon_type").toString()));
      }
      // validate the optional field `amount_currency`
      if (jsonObj.get("amount_currency") != null && !jsonObj.get("amount_currency").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("amount_currency"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("plan_codes") != null && !jsonObj.get("plan_codes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan_codes` to be an array in the JSON string but got `%s`", jsonObj.get("plan_codes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("billable_metric_codes") != null && !jsonObj.get("billable_metric_codes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `billable_metric_codes` to be an array in the JSON string but got `%s`", jsonObj.get("billable_metric_codes").toString()));
      }
      if ((jsonObj.get("percentage_rate") != null && !jsonObj.get("percentage_rate").isJsonNull()) && !jsonObj.get("percentage_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentage_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentage_rate").toString()));
      }
      if (!jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      if (!jsonObj.get("expiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiration").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CouponObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CouponObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CouponObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CouponObject.class));

       return (TypeAdapter<T>) new TypeAdapter<CouponObject>() {
           @Override
           public void write(JsonWriter out, CouponObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CouponObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CouponObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CouponObject
  * @throws IOException if the JSON string is invalid with respect to CouponObject
  */
  public static CouponObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CouponObject.class);
  }

 /**
  * Convert an instance of CouponObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

