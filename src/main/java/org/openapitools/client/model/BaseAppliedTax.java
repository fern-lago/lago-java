/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.46.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.openapitools.client.model.Currency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BaseAppliedTax
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-31T09:24:39.843670Z[Etc/UTC]")
public class BaseAppliedTax {
  public static final String SERIALIZED_NAME_LAGO_ID = "lago_id";
  @SerializedName(SERIALIZED_NAME_LAGO_ID)
  private UUID lagoId;

  public static final String SERIALIZED_NAME_LAGO_TAX_ID = "lago_tax_id";
  @SerializedName(SERIALIZED_NAME_LAGO_TAX_ID)
  private UUID lagoTaxId;

  public static final String SERIALIZED_NAME_TAX_NAME = "tax_name";
  @SerializedName(SERIALIZED_NAME_TAX_NAME)
  private String taxName;

  public static final String SERIALIZED_NAME_TAX_CODE = "tax_code";
  @SerializedName(SERIALIZED_NAME_TAX_CODE)
  private String taxCode;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private BigDecimal taxRate;

  public static final String SERIALIZED_NAME_TAX_DESCRIPTION = "tax_description";
  @SerializedName(SERIALIZED_NAME_TAX_DESCRIPTION)
  private String taxDescription;

  public static final String SERIALIZED_NAME_AMOUNT_CENTS = "amount_cents";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CENTS)
  private Integer amountCents;

  public static final String SERIALIZED_NAME_AMOUNT_CURRENCY = "amount_currency";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CURRENCY)
  private Currency amountCurrency;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public BaseAppliedTax() {
  }

  public BaseAppliedTax lagoId(UUID lagoId) {
    
    this.lagoId = lagoId;
    return this;
  }

   /**
   * Unique identifier of the applied tax, created by Lago.
   * @return lagoId
  **/
  @javax.annotation.Nullable
  public UUID getLagoId() {
    return lagoId;
  }


  public void setLagoId(UUID lagoId) {
    this.lagoId = lagoId;
  }


  public BaseAppliedTax lagoTaxId(UUID lagoTaxId) {
    
    this.lagoTaxId = lagoTaxId;
    return this;
  }

   /**
   * Unique identifier of the tax, created by Lago.
   * @return lagoTaxId
  **/
  @javax.annotation.Nullable
  public UUID getLagoTaxId() {
    return lagoTaxId;
  }


  public void setLagoTaxId(UUID lagoTaxId) {
    this.lagoTaxId = lagoTaxId;
  }


  public BaseAppliedTax taxName(String taxName) {
    
    this.taxName = taxName;
    return this;
  }

   /**
   * Name of the tax.
   * @return taxName
  **/
  @javax.annotation.Nullable
  public String getTaxName() {
    return taxName;
  }


  public void setTaxName(String taxName) {
    this.taxName = taxName;
  }


  public BaseAppliedTax taxCode(String taxCode) {
    
    this.taxCode = taxCode;
    return this;
  }

   /**
   * Unique code used to identify the tax associated with the API request.
   * @return taxCode
  **/
  @javax.annotation.Nullable
  public String getTaxCode() {
    return taxCode;
  }


  public void setTaxCode(String taxCode) {
    this.taxCode = taxCode;
  }


  public BaseAppliedTax taxRate(BigDecimal taxRate) {
    
    this.taxRate = taxRate;
    return this;
  }

   /**
   * The percentage rate of the tax
   * @return taxRate
  **/
  @javax.annotation.Nullable
  public BigDecimal getTaxRate() {
    return taxRate;
  }


  public void setTaxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
  }


  public BaseAppliedTax taxDescription(String taxDescription) {
    
    this.taxDescription = taxDescription;
    return this;
  }

   /**
   * Internal description of the taxe
   * @return taxDescription
  **/
  @javax.annotation.Nullable
  public String getTaxDescription() {
    return taxDescription;
  }


  public void setTaxDescription(String taxDescription) {
    this.taxDescription = taxDescription;
  }


  public BaseAppliedTax amountCents(Integer amountCents) {
    
    this.amountCents = amountCents;
    return this;
  }

   /**
   * Amount of the tax
   * @return amountCents
  **/
  @javax.annotation.Nullable
  public Integer getAmountCents() {
    return amountCents;
  }


  public void setAmountCents(Integer amountCents) {
    this.amountCents = amountCents;
  }


  public BaseAppliedTax amountCurrency(Currency amountCurrency) {
    
    this.amountCurrency = amountCurrency;
    return this;
  }

   /**
   * Get amountCurrency
   * @return amountCurrency
  **/
  @javax.annotation.Nullable
  public Currency getAmountCurrency() {
    return amountCurrency;
  }


  public void setAmountCurrency(Currency amountCurrency) {
    this.amountCurrency = amountCurrency;
  }


  public BaseAppliedTax createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time when the applied tax was created. It is expressed in UTC format according to the ISO 8601 datetime standard. This field provides the timestamp for the exact moment when the applied tax was initially created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseAppliedTax baseAppliedTax = (BaseAppliedTax) o;
    return Objects.equals(this.lagoId, baseAppliedTax.lagoId) &&
        Objects.equals(this.lagoTaxId, baseAppliedTax.lagoTaxId) &&
        Objects.equals(this.taxName, baseAppliedTax.taxName) &&
        Objects.equals(this.taxCode, baseAppliedTax.taxCode) &&
        Objects.equals(this.taxRate, baseAppliedTax.taxRate) &&
        Objects.equals(this.taxDescription, baseAppliedTax.taxDescription) &&
        Objects.equals(this.amountCents, baseAppliedTax.amountCents) &&
        Objects.equals(this.amountCurrency, baseAppliedTax.amountCurrency) &&
        Objects.equals(this.createdAt, baseAppliedTax.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lagoId, lagoTaxId, taxName, taxCode, taxRate, taxDescription, amountCents, amountCurrency, createdAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseAppliedTax {\n");
    sb.append("    lagoId: ").append(toIndentedString(lagoId)).append("\n");
    sb.append("    lagoTaxId: ").append(toIndentedString(lagoTaxId)).append("\n");
    sb.append("    taxName: ").append(toIndentedString(taxName)).append("\n");
    sb.append("    taxCode: ").append(toIndentedString(taxCode)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    taxDescription: ").append(toIndentedString(taxDescription)).append("\n");
    sb.append("    amountCents: ").append(toIndentedString(amountCents)).append("\n");
    sb.append("    amountCurrency: ").append(toIndentedString(amountCurrency)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lago_id");
    openapiFields.add("lago_tax_id");
    openapiFields.add("tax_name");
    openapiFields.add("tax_code");
    openapiFields.add("tax_rate");
    openapiFields.add("tax_description");
    openapiFields.add("amount_cents");
    openapiFields.add("amount_currency");
    openapiFields.add("created_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BaseAppliedTax
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BaseAppliedTax.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseAppliedTax is not found in the empty JSON string", BaseAppliedTax.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BaseAppliedTax.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BaseAppliedTax` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lago_id") != null && !jsonObj.get("lago_id").isJsonNull()) && !jsonObj.get("lago_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_id").toString()));
      }
      if ((jsonObj.get("lago_tax_id") != null && !jsonObj.get("lago_tax_id").isJsonNull()) && !jsonObj.get("lago_tax_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_tax_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_tax_id").toString()));
      }
      if ((jsonObj.get("tax_name") != null && !jsonObj.get("tax_name").isJsonNull()) && !jsonObj.get("tax_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_name").toString()));
      }
      if ((jsonObj.get("tax_code") != null && !jsonObj.get("tax_code").isJsonNull()) && !jsonObj.get("tax_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_code").toString()));
      }
      if ((jsonObj.get("tax_description") != null && !jsonObj.get("tax_description").isJsonNull()) && !jsonObj.get("tax_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_description").toString()));
      }
      // validate the optional field `amount_currency`
      if (jsonObj.get("amount_currency") != null && !jsonObj.get("amount_currency").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("amount_currency"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BaseAppliedTax.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BaseAppliedTax' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BaseAppliedTax> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BaseAppliedTax.class));

       return (TypeAdapter<T>) new TypeAdapter<BaseAppliedTax>() {
           @Override
           public void write(JsonWriter out, BaseAppliedTax value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BaseAppliedTax read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BaseAppliedTax given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BaseAppliedTax
  * @throws IOException if the JSON string is invalid with respect to BaseAppliedTax
  */
  public static BaseAppliedTax fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseAppliedTax.class);
  }

 /**
  * Convert an instance of BaseAppliedTax to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

