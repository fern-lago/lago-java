/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.46.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.FeeAppliedTaxObject;
import org.openapitools.client.model.FeeObjectItem;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreditNoteItemObjectFee
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-31T09:20:28.589842Z[Etc/UTC]")
public class CreditNoteItemObjectFee {
  public static final String SERIALIZED_NAME_LAGO_ID = "lago_id";
  @SerializedName(SERIALIZED_NAME_LAGO_ID)
  private UUID lagoId;

  public static final String SERIALIZED_NAME_LAGO_GROUP_ID = "lago_group_id";
  @SerializedName(SERIALIZED_NAME_LAGO_GROUP_ID)
  private UUID lagoGroupId;

  public static final String SERIALIZED_NAME_LAGO_INVOICE_ID = "lago_invoice_id";
  @SerializedName(SERIALIZED_NAME_LAGO_INVOICE_ID)
  private UUID lagoInvoiceId;

  public static final String SERIALIZED_NAME_LAGO_TRUE_UP_FEE_ID = "lago_true_up_fee_id";
  @SerializedName(SERIALIZED_NAME_LAGO_TRUE_UP_FEE_ID)
  private UUID lagoTrueUpFeeId;

  public static final String SERIALIZED_NAME_LAGO_TRUE_UP_PARENT_FEE_ID = "lago_true_up_parent_fee_id";
  @SerializedName(SERIALIZED_NAME_LAGO_TRUE_UP_PARENT_FEE_ID)
  private UUID lagoTrueUpParentFeeId;

  public static final String SERIALIZED_NAME_LAGO_SUBSCRIPTION_ID = "lago_subscription_id";
  @SerializedName(SERIALIZED_NAME_LAGO_SUBSCRIPTION_ID)
  private UUID lagoSubscriptionId;

  public static final String SERIALIZED_NAME_LAGO_CUSTOMER_ID = "lago_customer_id";
  @SerializedName(SERIALIZED_NAME_LAGO_CUSTOMER_ID)
  private UUID lagoCustomerId;

  public static final String SERIALIZED_NAME_EXTERNAL_CUSTOMER_ID = "external_customer_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CUSTOMER_ID)
  private String externalCustomerId;

  public static final String SERIALIZED_NAME_EXTERNAL_SUBSCRIPTION_ID = "external_subscription_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SUBSCRIPTION_ID)
  private String externalSubscriptionId;

  public static final String SERIALIZED_NAME_AMOUNT_CENTS = "amount_cents";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CENTS)
  private Integer amountCents;

  public static final String SERIALIZED_NAME_AMOUNT_CURRENCY = "amount_currency";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CURRENCY)
  private Currency amountCurrency;

  public static final String SERIALIZED_NAME_TAXES_AMOUNT_CENTS = "taxes_amount_cents";
  @SerializedName(SERIALIZED_NAME_TAXES_AMOUNT_CENTS)
  private Integer taxesAmountCents;

  public static final String SERIALIZED_NAME_TAXES_RATE = "taxes_rate";
  @SerializedName(SERIALIZED_NAME_TAXES_RATE)
  private BigDecimal taxesRate;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT_CENTS = "total_amount_cents";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_CENTS)
  private Integer totalAmountCents;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT_CURRENCY = "total_amount_currency";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_CURRENCY)
  private Currency totalAmountCurrency;

  public static final String SERIALIZED_NAME_EVENTS_COUNT = "events_count";
  @SerializedName(SERIALIZED_NAME_EVENTS_COUNT)
  private Integer eventsCount;

  public static final String SERIALIZED_NAME_PAY_IN_ADVANCE = "pay_in_advance";
  @SerializedName(SERIALIZED_NAME_PAY_IN_ADVANCE)
  private Boolean payInAdvance;

  public static final String SERIALIZED_NAME_INVOICEABLE = "invoiceable";
  @SerializedName(SERIALIZED_NAME_INVOICEABLE)
  private Boolean invoiceable;

  public static final String SERIALIZED_NAME_FROM_DATE = "from_date";
  @SerializedName(SERIALIZED_NAME_FROM_DATE)
  private OffsetDateTime fromDate;

  public static final String SERIALIZED_NAME_TO_DATE = "to_date";
  @SerializedName(SERIALIZED_NAME_TO_DATE)
  private OffsetDateTime toDate;

  /**
   * Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are &#x60;pending&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60; and &#x60;refunded&#x60;.
   */
  @JsonAdapter(PaymentStatusEnum.Adapter.class)
  public enum PaymentStatusEnum {
    PENDING("pending"),
    
    SUCCEEDED("succeeded"),
    
    FAILED("failed"),
    
    REFUNDED("refunded");

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentStatusEnum fromValue(String value) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "payment_status";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private PaymentStatusEnum paymentStatus;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_SUCCEEDED_AT = "succeeded_at";
  @SerializedName(SERIALIZED_NAME_SUCCEEDED_AT)
  private OffsetDateTime succeededAt;

  public static final String SERIALIZED_NAME_FAILED_AT = "failed_at";
  @SerializedName(SERIALIZED_NAME_FAILED_AT)
  private OffsetDateTime failedAt;

  public static final String SERIALIZED_NAME_REFUNDED_AT = "refunded_at";
  @SerializedName(SERIALIZED_NAME_REFUNDED_AT)
  private OffsetDateTime refundedAt;

  public static final String SERIALIZED_NAME_EVENT_TRANSACTION_ID = "event_transaction_id";
  @SerializedName(SERIALIZED_NAME_EVENT_TRANSACTION_ID)
  private String eventTransactionId;

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private FeeObjectItem item;

  public static final String SERIALIZED_NAME_APPLIED_TAXES = "applied_taxes";
  @SerializedName(SERIALIZED_NAME_APPLIED_TAXES)
  private List<FeeAppliedTaxObject> appliedTaxes;

  public CreditNoteItemObjectFee() {
  }

  public CreditNoteItemObjectFee lagoId(UUID lagoId) {
    
    this.lagoId = lagoId;
    return this;
  }

   /**
   * Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the feeâ€™s record within the Lago system.
   * @return lagoId
  **/
  @javax.annotation.Nullable
  public UUID getLagoId() {
    return lagoId;
  }


  public void setLagoId(UUID lagoId) {
    this.lagoId = lagoId;
  }


  public CreditNoteItemObjectFee lagoGroupId(UUID lagoGroupId) {
    
    this.lagoGroupId = lagoGroupId;
    return this;
  }

   /**
   * Unique identifier assigned to the group that the fee belongs to
   * @return lagoGroupId
  **/
  @javax.annotation.Nullable
  public UUID getLagoGroupId() {
    return lagoGroupId;
  }


  public void setLagoGroupId(UUID lagoGroupId) {
    this.lagoGroupId = lagoGroupId;
  }


  public CreditNoteItemObjectFee lagoInvoiceId(UUID lagoInvoiceId) {
    
    this.lagoInvoiceId = lagoInvoiceId;
    return this;
  }

   /**
   * Unique identifier assigned to the invoice that the fee belongs to
   * @return lagoInvoiceId
  **/
  @javax.annotation.Nullable
  public UUID getLagoInvoiceId() {
    return lagoInvoiceId;
  }


  public void setLagoInvoiceId(UUID lagoInvoiceId) {
    this.lagoInvoiceId = lagoInvoiceId;
  }


  public CreditNoteItemObjectFee lagoTrueUpFeeId(UUID lagoTrueUpFeeId) {
    
    this.lagoTrueUpFeeId = lagoTrueUpFeeId;
    return this;
  }

   /**
   * Unique identifier assigned to the true-up fee when a minimum has been set to the charge. This identifier helps to distinguish and manage the true-up fee associated with the charge, which may be applicable when a minimum threshold or limit is set for the charge amount.
   * @return lagoTrueUpFeeId
  **/
  @javax.annotation.Nullable
  public UUID getLagoTrueUpFeeId() {
    return lagoTrueUpFeeId;
  }


  public void setLagoTrueUpFeeId(UUID lagoTrueUpFeeId) {
    this.lagoTrueUpFeeId = lagoTrueUpFeeId;
  }


  public CreditNoteItemObjectFee lagoTrueUpParentFeeId(UUID lagoTrueUpParentFeeId) {
    
    this.lagoTrueUpParentFeeId = lagoTrueUpParentFeeId;
    return this;
  }

   /**
   * Unique identifier assigned to the parent fee on which the true-up fee is assigned. This identifier establishes the relationship between the parent fee and the associated true-up fee.
   * @return lagoTrueUpParentFeeId
  **/
  @javax.annotation.Nullable
  public UUID getLagoTrueUpParentFeeId() {
    return lagoTrueUpParentFeeId;
  }


  public void setLagoTrueUpParentFeeId(UUID lagoTrueUpParentFeeId) {
    this.lagoTrueUpParentFeeId = lagoTrueUpParentFeeId;
  }


  public CreditNoteItemObjectFee lagoSubscriptionId(UUID lagoSubscriptionId) {
    
    this.lagoSubscriptionId = lagoSubscriptionId;
    return this;
  }

   /**
   * Unique identifier assigned to the subscription, created by Lago. This field is specifically displayed when the fee type is charge and the payment for the fee is made in advance (&#x60;pay_in_advance&#x60; is set to true).
   * @return lagoSubscriptionId
  **/
  @javax.annotation.Nullable
  public UUID getLagoSubscriptionId() {
    return lagoSubscriptionId;
  }


  public void setLagoSubscriptionId(UUID lagoSubscriptionId) {
    this.lagoSubscriptionId = lagoSubscriptionId;
  }


  public CreditNoteItemObjectFee lagoCustomerId(UUID lagoCustomerId) {
    
    this.lagoCustomerId = lagoCustomerId;
    return this;
  }

   /**
   * Unique identifier assigned to the customer, created by Lago. This field is specifically displayed when the fee type is charge and the payment for the fee is made in advance (&#x60;pay_in_advance&#x60; is set to true).
   * @return lagoCustomerId
  **/
  @javax.annotation.Nullable
  public UUID getLagoCustomerId() {
    return lagoCustomerId;
  }


  public void setLagoCustomerId(UUID lagoCustomerId) {
    this.lagoCustomerId = lagoCustomerId;
  }


  public CreditNoteItemObjectFee externalCustomerId(String externalCustomerId) {
    
    this.externalCustomerId = externalCustomerId;
    return this;
  }

   /**
   * Unique identifier assigned to the customer in your application. This field is specifically displayed when the fee type is charge and the payment for the fee is made in advance (&#x60;pay_in_advance&#x60; is set to true).
   * @return externalCustomerId
  **/
  @javax.annotation.Nullable
  public String getExternalCustomerId() {
    return externalCustomerId;
  }


  public void setExternalCustomerId(String externalCustomerId) {
    this.externalCustomerId = externalCustomerId;
  }


  public CreditNoteItemObjectFee externalSubscriptionId(String externalSubscriptionId) {
    
    this.externalSubscriptionId = externalSubscriptionId;
    return this;
  }

   /**
   * Unique identifier assigned to the subscription in your application. This field is specifically displayed when the fee type is charge and the payment for the fee is made in advance (&#x60;pay_in_advance&#x60; is set to true).
   * @return externalSubscriptionId
  **/
  @javax.annotation.Nullable
  public String getExternalSubscriptionId() {
    return externalSubscriptionId;
  }


  public void setExternalSubscriptionId(String externalSubscriptionId) {
    this.externalSubscriptionId = externalSubscriptionId;
  }


  public CreditNoteItemObjectFee amountCents(Integer amountCents) {
    
    this.amountCents = amountCents;
    return this;
  }

   /**
   * The cost of this specific fee, excluding any applicable taxes.
   * @return amountCents
  **/
  @javax.annotation.Nonnull
  public Integer getAmountCents() {
    return amountCents;
  }


  public void setAmountCents(Integer amountCents) {
    this.amountCents = amountCents;
  }


  public CreditNoteItemObjectFee amountCurrency(Currency amountCurrency) {
    
    this.amountCurrency = amountCurrency;
    return this;
  }

   /**
   * Get amountCurrency
   * @return amountCurrency
  **/
  @javax.annotation.Nonnull
  public Currency getAmountCurrency() {
    return amountCurrency;
  }


  public void setAmountCurrency(Currency amountCurrency) {
    this.amountCurrency = amountCurrency;
  }


  public CreditNoteItemObjectFee taxesAmountCents(Integer taxesAmountCents) {
    
    this.taxesAmountCents = taxesAmountCents;
    return this;
  }

   /**
   * The cost of the tax associated with this specific fee.
   * @return taxesAmountCents
  **/
  @javax.annotation.Nonnull
  public Integer getTaxesAmountCents() {
    return taxesAmountCents;
  }


  public void setTaxesAmountCents(Integer taxesAmountCents) {
    this.taxesAmountCents = taxesAmountCents;
  }


  public CreditNoteItemObjectFee taxesRate(BigDecimal taxesRate) {
    
    this.taxesRate = taxesRate;
    return this;
  }

   /**
   * The tax rate associated with this specific fee.
   * @return taxesRate
  **/
  @javax.annotation.Nonnull
  public BigDecimal getTaxesRate() {
    return taxesRate;
  }


  public void setTaxesRate(BigDecimal taxesRate) {
    this.taxesRate = taxesRate;
  }


  public CreditNoteItemObjectFee units(String units) {
    
    this.units = units;
    return this;
  }

   /**
   * The number of units used to charge the customer. This field indicates the quantity or count of units consumed or utilized in the context of the charge. It helps in determining the basis for calculating the fee or cost associated with the usage of the service or product provided to the customer.
   * @return units
  **/
  @javax.annotation.Nonnull
  public String getUnits() {
    return units;
  }


  public void setUnits(String units) {
    this.units = units;
  }


  public CreditNoteItemObjectFee totalAmountCents(Integer totalAmountCents) {
    
    this.totalAmountCents = totalAmountCents;
    return this;
  }

   /**
   * The cost of this specific fee, including any applicable taxes.
   * @return totalAmountCents
  **/
  @javax.annotation.Nonnull
  public Integer getTotalAmountCents() {
    return totalAmountCents;
  }


  public void setTotalAmountCents(Integer totalAmountCents) {
    this.totalAmountCents = totalAmountCents;
  }


  public CreditNoteItemObjectFee totalAmountCurrency(Currency totalAmountCurrency) {
    
    this.totalAmountCurrency = totalAmountCurrency;
    return this;
  }

   /**
   * Get totalAmountCurrency
   * @return totalAmountCurrency
  **/
  @javax.annotation.Nonnull
  public Currency getTotalAmountCurrency() {
    return totalAmountCurrency;
  }


  public void setTotalAmountCurrency(Currency totalAmountCurrency) {
    this.totalAmountCurrency = totalAmountCurrency;
  }


  public CreditNoteItemObjectFee eventsCount(Integer eventsCount) {
    
    this.eventsCount = eventsCount;
    return this;
  }

   /**
   * The number of events that have been sent and used to charge the customer. This field indicates the count or quantity of events that have been processed and considered in the charging process.
   * @return eventsCount
  **/
  @javax.annotation.Nullable
  public Integer getEventsCount() {
    return eventsCount;
  }


  public void setEventsCount(Integer eventsCount) {
    this.eventsCount = eventsCount;
  }


  public CreditNoteItemObjectFee payInAdvance(Boolean payInAdvance) {
    
    this.payInAdvance = payInAdvance;
    return this;
  }

   /**
   * Flag that indicates whether the fee was paid in advance. It serves as a boolean value, where &#x60;true&#x60; represents that the fee was paid in advance (straightaway), and &#x60;false&#x60; indicates that the fee was not paid in arrears (at the end of the period).
   * @return payInAdvance
  **/
  @javax.annotation.Nonnull
  public Boolean getPayInAdvance() {
    return payInAdvance;
  }


  public void setPayInAdvance(Boolean payInAdvance) {
    this.payInAdvance = payInAdvance;
  }


  public CreditNoteItemObjectFee invoiceable(Boolean invoiceable) {
    
    this.invoiceable = invoiceable;
    return this;
  }

   /**
   * Flag that indicates whether the fee was included on the invoice. It serves as a boolean value, where &#x60;true&#x60; represents that the fee was included on the invoice, and &#x60;false&#x60; indicates that the fee was not included on the invoice.
   * @return invoiceable
  **/
  @javax.annotation.Nonnull
  public Boolean getInvoiceable() {
    return invoiceable;
  }


  public void setInvoiceable(Boolean invoiceable) {
    this.invoiceable = invoiceable;
  }


  public CreditNoteItemObjectFee fromDate(OffsetDateTime fromDate) {
    
    this.fromDate = fromDate;
    return this;
  }

   /**
   * The beginning date of the period that the fee covers. It is applicable only to &#x60;subscription&#x60; and &#x60;charge&#x60; fees. This field indicates the start date of the billing period or subscription period associated with the fee.
   * @return fromDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getFromDate() {
    return fromDate;
  }


  public void setFromDate(OffsetDateTime fromDate) {
    this.fromDate = fromDate;
  }


  public CreditNoteItemObjectFee toDate(OffsetDateTime toDate) {
    
    this.toDate = toDate;
    return this;
  }

   /**
   * The ending date of the period that the fee covers. It is applicable only to &#x60;subscription&#x60; and &#x60;charge&#x60; fees. This field indicates the end date of the billing period or subscription period associated with the fee.
   * @return toDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getToDate() {
    return toDate;
  }


  public void setToDate(OffsetDateTime toDate) {
    this.toDate = toDate;
  }


  public CreditNoteItemObjectFee paymentStatus(PaymentStatusEnum paymentStatus) {
    
    this.paymentStatus = paymentStatus;
    return this;
  }

   /**
   * Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are &#x60;pending&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60; and &#x60;refunded&#x60;.
   * @return paymentStatus
  **/
  @javax.annotation.Nonnull
  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }


  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public CreditNoteItemObjectFee createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time when the fee was created. It is provided in Coordinated Universal Time (UTC) format.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CreditNoteItemObjectFee succeededAt(OffsetDateTime succeededAt) {
    
    this.succeededAt = succeededAt;
    return this;
  }

   /**
   * The date and time when the payment for the fee was successfully processed. It is provided in Coordinated Universal Time (UTC) format.
   * @return succeededAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSucceededAt() {
    return succeededAt;
  }


  public void setSucceededAt(OffsetDateTime succeededAt) {
    this.succeededAt = succeededAt;
  }


  public CreditNoteItemObjectFee failedAt(OffsetDateTime failedAt) {
    
    this.failedAt = failedAt;
    return this;
  }

   /**
   * The date and time when the payment for the fee failed to process. It is provided in Coordinated Universal Time (UTC) format.
   * @return failedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getFailedAt() {
    return failedAt;
  }


  public void setFailedAt(OffsetDateTime failedAt) {
    this.failedAt = failedAt;
  }


  public CreditNoteItemObjectFee refundedAt(OffsetDateTime refundedAt) {
    
    this.refundedAt = refundedAt;
    return this;
  }

   /**
   * The date and time when the payment for the fee was refunded. It is provided in Coordinated Universal Time (UTC) format
   * @return refundedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRefundedAt() {
    return refundedAt;
  }


  public void setRefundedAt(OffsetDateTime refundedAt) {
    this.refundedAt = refundedAt;
  }


  public CreditNoteItemObjectFee eventTransactionId(String eventTransactionId) {
    
    this.eventTransactionId = eventTransactionId;
    return this;
  }

   /**
   * Unique identifier assigned to the transaction. This field is specifically displayed when the fee type is &#x60;charge&#x60; and the payment for the fee is made in advance (&#x60;pay_in_advance&#x60; is set to &#x60;true&#x60;).
   * @return eventTransactionId
  **/
  @javax.annotation.Nullable
  public String getEventTransactionId() {
    return eventTransactionId;
  }


  public void setEventTransactionId(String eventTransactionId) {
    this.eventTransactionId = eventTransactionId;
  }


  public CreditNoteItemObjectFee item(FeeObjectItem item) {
    
    this.item = item;
    return this;
  }

   /**
   * Get item
   * @return item
  **/
  @javax.annotation.Nonnull
  public FeeObjectItem getItem() {
    return item;
  }


  public void setItem(FeeObjectItem item) {
    this.item = item;
  }


  public CreditNoteItemObjectFee appliedTaxes(List<FeeAppliedTaxObject> appliedTaxes) {
    
    this.appliedTaxes = appliedTaxes;
    return this;
  }

  public CreditNoteItemObjectFee addAppliedTaxesItem(FeeAppliedTaxObject appliedTaxesItem) {
    if (this.appliedTaxes == null) {
      this.appliedTaxes = new ArrayList<>();
    }
    this.appliedTaxes.add(appliedTaxesItem);
    return this;
  }

   /**
   * List of fee applied taxes
   * @return appliedTaxes
  **/
  @javax.annotation.Nullable
  public List<FeeAppliedTaxObject> getAppliedTaxes() {
    return appliedTaxes;
  }


  public void setAppliedTaxes(List<FeeAppliedTaxObject> appliedTaxes) {
    this.appliedTaxes = appliedTaxes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditNoteItemObjectFee creditNoteItemObjectFee = (CreditNoteItemObjectFee) o;
    return Objects.equals(this.lagoId, creditNoteItemObjectFee.lagoId) &&
        Objects.equals(this.lagoGroupId, creditNoteItemObjectFee.lagoGroupId) &&
        Objects.equals(this.lagoInvoiceId, creditNoteItemObjectFee.lagoInvoiceId) &&
        Objects.equals(this.lagoTrueUpFeeId, creditNoteItemObjectFee.lagoTrueUpFeeId) &&
        Objects.equals(this.lagoTrueUpParentFeeId, creditNoteItemObjectFee.lagoTrueUpParentFeeId) &&
        Objects.equals(this.lagoSubscriptionId, creditNoteItemObjectFee.lagoSubscriptionId) &&
        Objects.equals(this.lagoCustomerId, creditNoteItemObjectFee.lagoCustomerId) &&
        Objects.equals(this.externalCustomerId, creditNoteItemObjectFee.externalCustomerId) &&
        Objects.equals(this.externalSubscriptionId, creditNoteItemObjectFee.externalSubscriptionId) &&
        Objects.equals(this.amountCents, creditNoteItemObjectFee.amountCents) &&
        Objects.equals(this.amountCurrency, creditNoteItemObjectFee.amountCurrency) &&
        Objects.equals(this.taxesAmountCents, creditNoteItemObjectFee.taxesAmountCents) &&
        Objects.equals(this.taxesRate, creditNoteItemObjectFee.taxesRate) &&
        Objects.equals(this.units, creditNoteItemObjectFee.units) &&
        Objects.equals(this.totalAmountCents, creditNoteItemObjectFee.totalAmountCents) &&
        Objects.equals(this.totalAmountCurrency, creditNoteItemObjectFee.totalAmountCurrency) &&
        Objects.equals(this.eventsCount, creditNoteItemObjectFee.eventsCount) &&
        Objects.equals(this.payInAdvance, creditNoteItemObjectFee.payInAdvance) &&
        Objects.equals(this.invoiceable, creditNoteItemObjectFee.invoiceable) &&
        Objects.equals(this.fromDate, creditNoteItemObjectFee.fromDate) &&
        Objects.equals(this.toDate, creditNoteItemObjectFee.toDate) &&
        Objects.equals(this.paymentStatus, creditNoteItemObjectFee.paymentStatus) &&
        Objects.equals(this.createdAt, creditNoteItemObjectFee.createdAt) &&
        Objects.equals(this.succeededAt, creditNoteItemObjectFee.succeededAt) &&
        Objects.equals(this.failedAt, creditNoteItemObjectFee.failedAt) &&
        Objects.equals(this.refundedAt, creditNoteItemObjectFee.refundedAt) &&
        Objects.equals(this.eventTransactionId, creditNoteItemObjectFee.eventTransactionId) &&
        Objects.equals(this.item, creditNoteItemObjectFee.item) &&
        Objects.equals(this.appliedTaxes, creditNoteItemObjectFee.appliedTaxes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(lagoId, lagoGroupId, lagoInvoiceId, lagoTrueUpFeeId, lagoTrueUpParentFeeId, lagoSubscriptionId, lagoCustomerId, externalCustomerId, externalSubscriptionId, amountCents, amountCurrency, taxesAmountCents, taxesRate, units, totalAmountCents, totalAmountCurrency, eventsCount, payInAdvance, invoiceable, fromDate, toDate, paymentStatus, createdAt, succeededAt, failedAt, refundedAt, eventTransactionId, item, appliedTaxes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditNoteItemObjectFee {\n");
    sb.append("    lagoId: ").append(toIndentedString(lagoId)).append("\n");
    sb.append("    lagoGroupId: ").append(toIndentedString(lagoGroupId)).append("\n");
    sb.append("    lagoInvoiceId: ").append(toIndentedString(lagoInvoiceId)).append("\n");
    sb.append("    lagoTrueUpFeeId: ").append(toIndentedString(lagoTrueUpFeeId)).append("\n");
    sb.append("    lagoTrueUpParentFeeId: ").append(toIndentedString(lagoTrueUpParentFeeId)).append("\n");
    sb.append("    lagoSubscriptionId: ").append(toIndentedString(lagoSubscriptionId)).append("\n");
    sb.append("    lagoCustomerId: ").append(toIndentedString(lagoCustomerId)).append("\n");
    sb.append("    externalCustomerId: ").append(toIndentedString(externalCustomerId)).append("\n");
    sb.append("    externalSubscriptionId: ").append(toIndentedString(externalSubscriptionId)).append("\n");
    sb.append("    amountCents: ").append(toIndentedString(amountCents)).append("\n");
    sb.append("    amountCurrency: ").append(toIndentedString(amountCurrency)).append("\n");
    sb.append("    taxesAmountCents: ").append(toIndentedString(taxesAmountCents)).append("\n");
    sb.append("    taxesRate: ").append(toIndentedString(taxesRate)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    totalAmountCents: ").append(toIndentedString(totalAmountCents)).append("\n");
    sb.append("    totalAmountCurrency: ").append(toIndentedString(totalAmountCurrency)).append("\n");
    sb.append("    eventsCount: ").append(toIndentedString(eventsCount)).append("\n");
    sb.append("    payInAdvance: ").append(toIndentedString(payInAdvance)).append("\n");
    sb.append("    invoiceable: ").append(toIndentedString(invoiceable)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    succeededAt: ").append(toIndentedString(succeededAt)).append("\n");
    sb.append("    failedAt: ").append(toIndentedString(failedAt)).append("\n");
    sb.append("    refundedAt: ").append(toIndentedString(refundedAt)).append("\n");
    sb.append("    eventTransactionId: ").append(toIndentedString(eventTransactionId)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    appliedTaxes: ").append(toIndentedString(appliedTaxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lago_id");
    openapiFields.add("lago_group_id");
    openapiFields.add("lago_invoice_id");
    openapiFields.add("lago_true_up_fee_id");
    openapiFields.add("lago_true_up_parent_fee_id");
    openapiFields.add("lago_subscription_id");
    openapiFields.add("lago_customer_id");
    openapiFields.add("external_customer_id");
    openapiFields.add("external_subscription_id");
    openapiFields.add("amount_cents");
    openapiFields.add("amount_currency");
    openapiFields.add("taxes_amount_cents");
    openapiFields.add("taxes_rate");
    openapiFields.add("units");
    openapiFields.add("total_amount_cents");
    openapiFields.add("total_amount_currency");
    openapiFields.add("events_count");
    openapiFields.add("pay_in_advance");
    openapiFields.add("invoiceable");
    openapiFields.add("from_date");
    openapiFields.add("to_date");
    openapiFields.add("payment_status");
    openapiFields.add("created_at");
    openapiFields.add("succeeded_at");
    openapiFields.add("failed_at");
    openapiFields.add("refunded_at");
    openapiFields.add("event_transaction_id");
    openapiFields.add("item");
    openapiFields.add("applied_taxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount_cents");
    openapiRequiredFields.add("amount_currency");
    openapiRequiredFields.add("taxes_amount_cents");
    openapiRequiredFields.add("taxes_rate");
    openapiRequiredFields.add("units");
    openapiRequiredFields.add("total_amount_cents");
    openapiRequiredFields.add("total_amount_currency");
    openapiRequiredFields.add("pay_in_advance");
    openapiRequiredFields.add("invoiceable");
    openapiRequiredFields.add("payment_status");
    openapiRequiredFields.add("item");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreditNoteItemObjectFee
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreditNoteItemObjectFee.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreditNoteItemObjectFee is not found in the empty JSON string", CreditNoteItemObjectFee.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreditNoteItemObjectFee.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreditNoteItemObjectFee` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreditNoteItemObjectFee.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lago_id") != null && !jsonObj.get("lago_id").isJsonNull()) && !jsonObj.get("lago_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_id").toString()));
      }
      if ((jsonObj.get("lago_group_id") != null && !jsonObj.get("lago_group_id").isJsonNull()) && !jsonObj.get("lago_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_group_id").toString()));
      }
      if ((jsonObj.get("lago_invoice_id") != null && !jsonObj.get("lago_invoice_id").isJsonNull()) && !jsonObj.get("lago_invoice_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_invoice_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_invoice_id").toString()));
      }
      if ((jsonObj.get("lago_true_up_fee_id") != null && !jsonObj.get("lago_true_up_fee_id").isJsonNull()) && !jsonObj.get("lago_true_up_fee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_true_up_fee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_true_up_fee_id").toString()));
      }
      if ((jsonObj.get("lago_true_up_parent_fee_id") != null && !jsonObj.get("lago_true_up_parent_fee_id").isJsonNull()) && !jsonObj.get("lago_true_up_parent_fee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_true_up_parent_fee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_true_up_parent_fee_id").toString()));
      }
      if ((jsonObj.get("lago_subscription_id") != null && !jsonObj.get("lago_subscription_id").isJsonNull()) && !jsonObj.get("lago_subscription_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_subscription_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_subscription_id").toString()));
      }
      if ((jsonObj.get("lago_customer_id") != null && !jsonObj.get("lago_customer_id").isJsonNull()) && !jsonObj.get("lago_customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_customer_id").toString()));
      }
      if ((jsonObj.get("external_customer_id") != null && !jsonObj.get("external_customer_id").isJsonNull()) && !jsonObj.get("external_customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_customer_id").toString()));
      }
      if ((jsonObj.get("external_subscription_id") != null && !jsonObj.get("external_subscription_id").isJsonNull()) && !jsonObj.get("external_subscription_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_subscription_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_subscription_id").toString()));
      }
      // validate the required field `amount_currency`
      Currency.validateJsonElement(jsonObj.get("amount_currency"));
      if (!jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
      // validate the required field `total_amount_currency`
      Currency.validateJsonElement(jsonObj.get("total_amount_currency"));
      if (!jsonObj.get("payment_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_status").toString()));
      }
      if ((jsonObj.get("event_transaction_id") != null && !jsonObj.get("event_transaction_id").isJsonNull()) && !jsonObj.get("event_transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_transaction_id").toString()));
      }
      // validate the required field `item`
      FeeObjectItem.validateJsonElement(jsonObj.get("item"));
      if (jsonObj.get("applied_taxes") != null && !jsonObj.get("applied_taxes").isJsonNull()) {
        JsonArray jsonArrayappliedTaxes = jsonObj.getAsJsonArray("applied_taxes");
        if (jsonArrayappliedTaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applied_taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applied_taxes` to be an array in the JSON string but got `%s`", jsonObj.get("applied_taxes").toString()));
          }

          // validate the optional field `applied_taxes` (array)
          for (int i = 0; i < jsonArrayappliedTaxes.size(); i++) {
            FeeAppliedTaxObject.validateJsonElement(jsonArrayappliedTaxes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreditNoteItemObjectFee.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreditNoteItemObjectFee' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreditNoteItemObjectFee> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreditNoteItemObjectFee.class));

       return (TypeAdapter<T>) new TypeAdapter<CreditNoteItemObjectFee>() {
           @Override
           public void write(JsonWriter out, CreditNoteItemObjectFee value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreditNoteItemObjectFee read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreditNoteItemObjectFee given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreditNoteItemObjectFee
  * @throws IOException if the JSON string is invalid with respect to CreditNoteItemObjectFee
  */
  public static CreditNoteItemObjectFee fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreditNoteItemObjectFee.class);
  }

 /**
  * Convert an instance of CreditNoteItemObjectFee to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

