/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.46.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChargePropertiesVolumeRangesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-31T09:20:28.589842Z[Etc/UTC]")
public class ChargePropertiesVolumeRangesInner {
  public static final String SERIALIZED_NAME_FROM_VALUE = "from_value";
  @SerializedName(SERIALIZED_NAME_FROM_VALUE)
  private Integer fromValue;

  public static final String SERIALIZED_NAME_TO_VALUE = "to_value";
  @SerializedName(SERIALIZED_NAME_TO_VALUE)
  private Integer toValue;

  public static final String SERIALIZED_NAME_FLAT_AMOUNT = "flat_amount";
  @SerializedName(SERIALIZED_NAME_FLAT_AMOUNT)
  private String flatAmount;

  public static final String SERIALIZED_NAME_PER_UNIT_AMOUNT = "per_unit_amount";
  @SerializedName(SERIALIZED_NAME_PER_UNIT_AMOUNT)
  private String perUnitAmount;

  public ChargePropertiesVolumeRangesInner() {
  }

  public ChargePropertiesVolumeRangesInner fromValue(Integer fromValue) {
    
    this.fromValue = fromValue;
    return this;
  }

   /**
   * Specifies the lower value of a tier for a &#x60;volume&#x60; charge model. It must be either 0 or the previous range&#39;s &#x60;to_value + 1&#x60; to maintain the proper sequence of values.
   * @return fromValue
  **/
  @javax.annotation.Nonnull
  public Integer getFromValue() {
    return fromValue;
  }


  public void setFromValue(Integer fromValue) {
    this.fromValue = fromValue;
  }


  public ChargePropertiesVolumeRangesInner toValue(Integer toValue) {
    
    this.toValue = toValue;
    return this;
  }

   /**
   * Specifies the highest value of a tier for a &#x60;volume&#x60; charge model. - This value must be higher than the &#x60;from_value&#x60; of the same tier. - This value must be &#x60;null&#x60; for the last tier.
   * @return toValue
  **/
  @javax.annotation.Nullable
  public Integer getToValue() {
    return toValue;
  }


  public void setToValue(Integer toValue) {
    this.toValue = toValue;
  }


  public ChargePropertiesVolumeRangesInner flatAmount(String flatAmount) {
    
    this.flatAmount = flatAmount;
    return this;
  }

   /**
   * The unit price, excluding tax, for a specific tier of a &#x60;volume&#x60; charge model. It is expressed as a decimal value.
   * @return flatAmount
  **/
  @javax.annotation.Nonnull
  public String getFlatAmount() {
    return flatAmount;
  }


  public void setFlatAmount(String flatAmount) {
    this.flatAmount = flatAmount;
  }


  public ChargePropertiesVolumeRangesInner perUnitAmount(String perUnitAmount) {
    
    this.perUnitAmount = perUnitAmount;
    return this;
  }

   /**
   * The flat amount for a whole tier, excluding tax, for a &#x60;volume&#x60; charge model. It is expressed as a decimal value.
   * @return perUnitAmount
  **/
  @javax.annotation.Nonnull
  public String getPerUnitAmount() {
    return perUnitAmount;
  }


  public void setPerUnitAmount(String perUnitAmount) {
    this.perUnitAmount = perUnitAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargePropertiesVolumeRangesInner chargePropertiesVolumeRangesInner = (ChargePropertiesVolumeRangesInner) o;
    return Objects.equals(this.fromValue, chargePropertiesVolumeRangesInner.fromValue) &&
        Objects.equals(this.toValue, chargePropertiesVolumeRangesInner.toValue) &&
        Objects.equals(this.flatAmount, chargePropertiesVolumeRangesInner.flatAmount) &&
        Objects.equals(this.perUnitAmount, chargePropertiesVolumeRangesInner.perUnitAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromValue, toValue, flatAmount, perUnitAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargePropertiesVolumeRangesInner {\n");
    sb.append("    fromValue: ").append(toIndentedString(fromValue)).append("\n");
    sb.append("    toValue: ").append(toIndentedString(toValue)).append("\n");
    sb.append("    flatAmount: ").append(toIndentedString(flatAmount)).append("\n");
    sb.append("    perUnitAmount: ").append(toIndentedString(perUnitAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("from_value");
    openapiFields.add("to_value");
    openapiFields.add("flat_amount");
    openapiFields.add("per_unit_amount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("from_value");
    openapiRequiredFields.add("to_value");
    openapiRequiredFields.add("flat_amount");
    openapiRequiredFields.add("per_unit_amount");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ChargePropertiesVolumeRangesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChargePropertiesVolumeRangesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChargePropertiesVolumeRangesInner is not found in the empty JSON string", ChargePropertiesVolumeRangesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ChargePropertiesVolumeRangesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChargePropertiesVolumeRangesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChargePropertiesVolumeRangesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("flat_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flat_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flat_amount").toString()));
      }
      if (!jsonObj.get("per_unit_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `per_unit_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("per_unit_amount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChargePropertiesVolumeRangesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChargePropertiesVolumeRangesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChargePropertiesVolumeRangesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChargePropertiesVolumeRangesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ChargePropertiesVolumeRangesInner>() {
           @Override
           public void write(JsonWriter out, ChargePropertiesVolumeRangesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChargePropertiesVolumeRangesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChargePropertiesVolumeRangesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChargePropertiesVolumeRangesInner
  * @throws IOException if the JSON string is invalid with respect to ChargePropertiesVolumeRangesInner
  */
  public static ChargePropertiesVolumeRangesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChargePropertiesVolumeRangesInner.class);
  }

 /**
  * Convert an instance of ChargePropertiesVolumeRangesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

