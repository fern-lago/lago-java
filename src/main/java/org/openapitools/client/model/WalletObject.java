/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.52.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.openapitools.client.model.Currency;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * WalletObject
 */
@JsonPropertyOrder({
  WalletObject.JSON_PROPERTY_LAGO_ID,
  WalletObject.JSON_PROPERTY_LAGO_CUSTOMER_ID,
  WalletObject.JSON_PROPERTY_EXTERNAL_CUSTOMER_ID,
  WalletObject.JSON_PROPERTY_STATUS,
  WalletObject.JSON_PROPERTY_CURRENCY,
  WalletObject.JSON_PROPERTY_NAME,
  WalletObject.JSON_PROPERTY_RATE_AMOUNT,
  WalletObject.JSON_PROPERTY_CREDITS_BALANCE,
  WalletObject.JSON_PROPERTY_BALANCE_CENTS,
  WalletObject.JSON_PROPERTY_CONSUMED_CREDITS,
  WalletObject.JSON_PROPERTY_CREATED_AT,
  WalletObject.JSON_PROPERTY_EXPIRATION_AT,
  WalletObject.JSON_PROPERTY_LAST_BALANCE_SYNC_AT,
  WalletObject.JSON_PROPERTY_LAST_CONSUMED_CREDIT_AT,
  WalletObject.JSON_PROPERTY_TERMINATED_AT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-24T14:46:07.416771019Z[Etc/UTC]")
public class WalletObject {
  public static final String JSON_PROPERTY_LAGO_ID = "lago_id";
  private UUID lagoId;

  public static final String JSON_PROPERTY_LAGO_CUSTOMER_ID = "lago_customer_id";
  private UUID lagoCustomerId;

  public static final String JSON_PROPERTY_EXTERNAL_CUSTOMER_ID = "external_customer_id";
  private String externalCustomerId;

  /**
   * The status of the wallet. Possible values are &#x60;active&#x60; or &#x60;terminated&#x60;.
   */
  public enum StatusEnum {
    ACTIVE("active"),
    
    TERMINATED("terminated");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private Currency currency;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_RATE_AMOUNT = "rate_amount";
  private String rateAmount;

  public static final String JSON_PROPERTY_CREDITS_BALANCE = "credits_balance";
  private String creditsBalance;

  public static final String JSON_PROPERTY_BALANCE_CENTS = "balance_cents";
  private Integer balanceCents;

  public static final String JSON_PROPERTY_CONSUMED_CREDITS = "consumed_credits";
  private String consumedCredits;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_EXPIRATION_AT = "expiration_at";
  private JsonNullable<OffsetDateTime> expirationAt = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_LAST_BALANCE_SYNC_AT = "last_balance_sync_at";
  private JsonNullable<OffsetDateTime> lastBalanceSyncAt = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_LAST_CONSUMED_CREDIT_AT = "last_consumed_credit_at";
  private JsonNullable<OffsetDateTime> lastConsumedCreditAt = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_TERMINATED_AT = "terminated_at";
  private JsonNullable<OffsetDateTime> terminatedAt = JsonNullable.<OffsetDateTime>undefined();

  public WalletObject() {
  }

  public WalletObject lagoId(UUID lagoId) {
    
    this.lagoId = lagoId;
    return this;
  }

   /**
   * Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system.
   * @return lagoId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LAGO_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getLagoId() {
    return lagoId;
  }


  @JsonProperty(JSON_PROPERTY_LAGO_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLagoId(UUID lagoId) {
    this.lagoId = lagoId;
  }


  public WalletObject lagoCustomerId(UUID lagoCustomerId) {
    
    this.lagoCustomerId = lagoCustomerId;
    return this;
  }

   /**
   * Unique identifier assigned to the customer within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the customer’s record within the Lago system.
   * @return lagoCustomerId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LAGO_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getLagoCustomerId() {
    return lagoCustomerId;
  }


  @JsonProperty(JSON_PROPERTY_LAGO_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLagoCustomerId(UUID lagoCustomerId) {
    this.lagoCustomerId = lagoCustomerId;
  }


  public WalletObject externalCustomerId(String externalCustomerId) {
    
    this.externalCustomerId = externalCustomerId;
    return this;
  }

   /**
   * The customer external unique identifier (provided by your own application)
   * @return externalCustomerId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXTERNAL_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getExternalCustomerId() {
    return externalCustomerId;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExternalCustomerId(String externalCustomerId) {
    this.externalCustomerId = externalCustomerId;
  }


  public WalletObject status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the wallet. Possible values are &#x60;active&#x60; or &#x60;terminated&#x60;.
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public WalletObject currency(Currency currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Currency getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public WalletObject name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the wallet.
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public WalletObject rateAmount(String rateAmount) {
    
    this.rateAmount = rateAmount;
    return this;
  }

   /**
   * The rate of conversion between credits and the amount in the specified currency. It indicates the ratio or factor used to convert credits into the corresponding monetary value in the currency of the transaction.
   * @return rateAmount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RATE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRateAmount() {
    return rateAmount;
  }


  @JsonProperty(JSON_PROPERTY_RATE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRateAmount(String rateAmount) {
    this.rateAmount = rateAmount;
  }


  public WalletObject creditsBalance(String creditsBalance) {
    
    this.creditsBalance = creditsBalance;
    return this;
  }

   /**
   * The current wallet balance expressed in credits.
   * @return creditsBalance
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREDITS_BALANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCreditsBalance() {
    return creditsBalance;
  }


  @JsonProperty(JSON_PROPERTY_CREDITS_BALANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreditsBalance(String creditsBalance) {
    this.creditsBalance = creditsBalance;
  }


  public WalletObject balanceCents(Integer balanceCents) {
    
    this.balanceCents = balanceCents;
    return this;
  }

   /**
   * The current wallet balance expressed in cents.
   * @return balanceCents
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BALANCE_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getBalanceCents() {
    return balanceCents;
  }


  @JsonProperty(JSON_PROPERTY_BALANCE_CENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBalanceCents(Integer balanceCents) {
    this.balanceCents = balanceCents;
  }


  public WalletObject consumedCredits(String consumedCredits) {
    
    this.consumedCredits = consumedCredits;
    return this;
  }

   /**
   * The number of consumed credits.
   * @return consumedCredits
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONSUMED_CREDITS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getConsumedCredits() {
    return consumedCredits;
  }


  @JsonProperty(JSON_PROPERTY_CONSUMED_CREDITS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConsumedCredits(String consumedCredits) {
    this.consumedCredits = consumedCredits;
  }


  public WalletObject createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date of the wallet creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public WalletObject expirationAt(OffsetDateTime expirationAt) {
    this.expirationAt = JsonNullable.<OffsetDateTime>of(expirationAt);
    
    return this;
  }

   /**
   * The date and time that determines when the wallet will expire. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
   * @return expirationAt
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getExpirationAt() {
        return expirationAt.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXPIRATION_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getExpirationAt_JsonNullable() {
    return expirationAt;
  }
  
  @JsonProperty(JSON_PROPERTY_EXPIRATION_AT)
  public void setExpirationAt_JsonNullable(JsonNullable<OffsetDateTime> expirationAt) {
    this.expirationAt = expirationAt;
  }

  public void setExpirationAt(OffsetDateTime expirationAt) {
    this.expirationAt = JsonNullable.<OffsetDateTime>of(expirationAt);
  }


  public WalletObject lastBalanceSyncAt(OffsetDateTime lastBalanceSyncAt) {
    this.lastBalanceSyncAt = JsonNullable.<OffsetDateTime>of(lastBalanceSyncAt);
    
    return this;
  }

   /**
   * The date and time of the last balance top-up. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
   * @return lastBalanceSyncAt
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getLastBalanceSyncAt() {
        return lastBalanceSyncAt.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LAST_BALANCE_SYNC_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getLastBalanceSyncAt_JsonNullable() {
    return lastBalanceSyncAt;
  }
  
  @JsonProperty(JSON_PROPERTY_LAST_BALANCE_SYNC_AT)
  public void setLastBalanceSyncAt_JsonNullable(JsonNullable<OffsetDateTime> lastBalanceSyncAt) {
    this.lastBalanceSyncAt = lastBalanceSyncAt;
  }

  public void setLastBalanceSyncAt(OffsetDateTime lastBalanceSyncAt) {
    this.lastBalanceSyncAt = JsonNullable.<OffsetDateTime>of(lastBalanceSyncAt);
  }


  public WalletObject lastConsumedCreditAt(OffsetDateTime lastConsumedCreditAt) {
    this.lastConsumedCreditAt = JsonNullable.<OffsetDateTime>of(lastConsumedCreditAt);
    
    return this;
  }

   /**
   * The date and time of the last credits consumption. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
   * @return lastConsumedCreditAt
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getLastConsumedCreditAt() {
        return lastConsumedCreditAt.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LAST_CONSUMED_CREDIT_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getLastConsumedCreditAt_JsonNullable() {
    return lastConsumedCreditAt;
  }
  
  @JsonProperty(JSON_PROPERTY_LAST_CONSUMED_CREDIT_AT)
  public void setLastConsumedCreditAt_JsonNullable(JsonNullable<OffsetDateTime> lastConsumedCreditAt) {
    this.lastConsumedCreditAt = lastConsumedCreditAt;
  }

  public void setLastConsumedCreditAt(OffsetDateTime lastConsumedCreditAt) {
    this.lastConsumedCreditAt = JsonNullable.<OffsetDateTime>of(lastConsumedCreditAt);
  }


  public WalletObject terminatedAt(OffsetDateTime terminatedAt) {
    this.terminatedAt = JsonNullable.<OffsetDateTime>of(terminatedAt);
    
    return this;
  }

   /**
   * The date of terminaison of the wallet. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
   * @return terminatedAt
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getTerminatedAt() {
        return terminatedAt.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TERMINATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getTerminatedAt_JsonNullable() {
    return terminatedAt;
  }
  
  @JsonProperty(JSON_PROPERTY_TERMINATED_AT)
  public void setTerminatedAt_JsonNullable(JsonNullable<OffsetDateTime> terminatedAt) {
    this.terminatedAt = terminatedAt;
  }

  public void setTerminatedAt(OffsetDateTime terminatedAt) {
    this.terminatedAt = JsonNullable.<OffsetDateTime>of(terminatedAt);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WalletObject walletObject = (WalletObject) o;
    return Objects.equals(this.lagoId, walletObject.lagoId) &&
        Objects.equals(this.lagoCustomerId, walletObject.lagoCustomerId) &&
        Objects.equals(this.externalCustomerId, walletObject.externalCustomerId) &&
        Objects.equals(this.status, walletObject.status) &&
        Objects.equals(this.currency, walletObject.currency) &&
        Objects.equals(this.name, walletObject.name) &&
        Objects.equals(this.rateAmount, walletObject.rateAmount) &&
        Objects.equals(this.creditsBalance, walletObject.creditsBalance) &&
        Objects.equals(this.balanceCents, walletObject.balanceCents) &&
        Objects.equals(this.consumedCredits, walletObject.consumedCredits) &&
        Objects.equals(this.createdAt, walletObject.createdAt) &&
        equalsNullable(this.expirationAt, walletObject.expirationAt) &&
        equalsNullable(this.lastBalanceSyncAt, walletObject.lastBalanceSyncAt) &&
        equalsNullable(this.lastConsumedCreditAt, walletObject.lastConsumedCreditAt) &&
        equalsNullable(this.terminatedAt, walletObject.terminatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(lagoId, lagoCustomerId, externalCustomerId, status, currency, name, rateAmount, creditsBalance, balanceCents, consumedCredits, createdAt, hashCodeNullable(expirationAt), hashCodeNullable(lastBalanceSyncAt), hashCodeNullable(lastConsumedCreditAt), hashCodeNullable(terminatedAt));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WalletObject {\n");
    sb.append("    lagoId: ").append(toIndentedString(lagoId)).append("\n");
    sb.append("    lagoCustomerId: ").append(toIndentedString(lagoCustomerId)).append("\n");
    sb.append("    externalCustomerId: ").append(toIndentedString(externalCustomerId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rateAmount: ").append(toIndentedString(rateAmount)).append("\n");
    sb.append("    creditsBalance: ").append(toIndentedString(creditsBalance)).append("\n");
    sb.append("    balanceCents: ").append(toIndentedString(balanceCents)).append("\n");
    sb.append("    consumedCredits: ").append(toIndentedString(consumedCredits)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    expirationAt: ").append(toIndentedString(expirationAt)).append("\n");
    sb.append("    lastBalanceSyncAt: ").append(toIndentedString(lastBalanceSyncAt)).append("\n");
    sb.append("    lastConsumedCreditAt: ").append(toIndentedString(lastConsumedCreditAt)).append("\n");
    sb.append("    terminatedAt: ").append(toIndentedString(terminatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

