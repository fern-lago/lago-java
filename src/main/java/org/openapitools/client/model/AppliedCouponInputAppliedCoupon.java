/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.52.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.Currency;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AppliedCouponInputAppliedCoupon
 */
@JsonPropertyOrder({
  AppliedCouponInputAppliedCoupon.JSON_PROPERTY_EXTERNAL_CUSTOMER_ID,
  AppliedCouponInputAppliedCoupon.JSON_PROPERTY_COUPON_CODE,
  AppliedCouponInputAppliedCoupon.JSON_PROPERTY_FREQUENCY,
  AppliedCouponInputAppliedCoupon.JSON_PROPERTY_FREQUENCY_DURATION,
  AppliedCouponInputAppliedCoupon.JSON_PROPERTY_AMOUNT_CENTS,
  AppliedCouponInputAppliedCoupon.JSON_PROPERTY_AMOUNT_CURRENCY,
  AppliedCouponInputAppliedCoupon.JSON_PROPERTY_PERCENTAGE_RATE
})
@JsonTypeName("AppliedCouponInput_applied_coupon")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-24T14:41:05.749099654Z[Etc/UTC]")
public class AppliedCouponInputAppliedCoupon {
  public static final String JSON_PROPERTY_EXTERNAL_CUSTOMER_ID = "external_customer_id";
  private String externalCustomerId;

  public static final String JSON_PROPERTY_COUPON_CODE = "coupon_code";
  private String couponCode;

  /**
   * The type of frequency for the coupon. It can have three possible values: &#x60;once&#x60;, &#x60;recurring&#x60; or &#x60;forever&#x60;.  - If set to &#x60;once&#x60;, the coupon is applicable only for a single use. - If set to &#x60;recurring&#x60;, the coupon can be used multiple times for recurring billing periods. - If set to &#x60;forever&#x60;, the coupon has unlimited usage and can be applied indefinitely.
   */
  public enum FrequencyEnum {
    ONCE("once"),
    
    RECURRING("recurring");

    private String value;

    FrequencyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FrequencyEnum fromValue(String value) {
      for (FrequencyEnum b : FrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_FREQUENCY = "frequency";
  private JsonNullable<FrequencyEnum> frequency = JsonNullable.<FrequencyEnum>undefined();

  public static final String JSON_PROPERTY_FREQUENCY_DURATION = "frequency_duration";
  private JsonNullable<Integer> frequencyDuration = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_AMOUNT_CENTS = "amount_cents";
  private JsonNullable<Integer> amountCents = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_AMOUNT_CURRENCY = "amount_currency";
  private Currency amountCurrency;

  public static final String JSON_PROPERTY_PERCENTAGE_RATE = "percentage_rate";
  private JsonNullable<String> percentageRate = JsonNullable.<String>undefined();

  public AppliedCouponInputAppliedCoupon() {
  }

  public AppliedCouponInputAppliedCoupon externalCustomerId(String externalCustomerId) {
    
    this.externalCustomerId = externalCustomerId;
    return this;
  }

   /**
   * The customer external unique identifier (provided by your own application)
   * @return externalCustomerId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXTERNAL_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getExternalCustomerId() {
    return externalCustomerId;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExternalCustomerId(String externalCustomerId) {
    this.externalCustomerId = externalCustomerId;
  }


  public AppliedCouponInputAppliedCoupon couponCode(String couponCode) {
    
    this.couponCode = couponCode;
    return this;
  }

   /**
   * Unique code used to identify the coupon.
   * @return couponCode
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUPON_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCouponCode() {
    return couponCode;
  }


  @JsonProperty(JSON_PROPERTY_COUPON_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCouponCode(String couponCode) {
    this.couponCode = couponCode;
  }


  public AppliedCouponInputAppliedCoupon frequency(FrequencyEnum frequency) {
    this.frequency = JsonNullable.<FrequencyEnum>of(frequency);
    
    return this;
  }

   /**
   * The type of frequency for the coupon. It can have three possible values: &#x60;once&#x60;, &#x60;recurring&#x60; or &#x60;forever&#x60;.  - If set to &#x60;once&#x60;, the coupon is applicable only for a single use. - If set to &#x60;recurring&#x60;, the coupon can be used multiple times for recurring billing periods. - If set to &#x60;forever&#x60;, the coupon has unlimited usage and can be applied indefinitely.
   * @return frequency
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public FrequencyEnum getFrequency() {
        return frequency.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<FrequencyEnum> getFrequency_JsonNullable() {
    return frequency;
  }
  
  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  public void setFrequency_JsonNullable(JsonNullable<FrequencyEnum> frequency) {
    this.frequency = frequency;
  }

  public void setFrequency(FrequencyEnum frequency) {
    this.frequency = JsonNullable.<FrequencyEnum>of(frequency);
  }


  public AppliedCouponInputAppliedCoupon frequencyDuration(Integer frequencyDuration) {
    this.frequencyDuration = JsonNullable.<Integer>of(frequencyDuration);
    
    return this;
  }

   /**
   * Specifies the number of billing periods to which the coupon applies. This field is required only for coupons with a &#x60;recurring&#x60; frequency type
   * @return frequencyDuration
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getFrequencyDuration() {
        return frequencyDuration.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FREQUENCY_DURATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getFrequencyDuration_JsonNullable() {
    return frequencyDuration;
  }
  
  @JsonProperty(JSON_PROPERTY_FREQUENCY_DURATION)
  public void setFrequencyDuration_JsonNullable(JsonNullable<Integer> frequencyDuration) {
    this.frequencyDuration = frequencyDuration;
  }

  public void setFrequencyDuration(Integer frequencyDuration) {
    this.frequencyDuration = JsonNullable.<Integer>of(frequencyDuration);
  }


  public AppliedCouponInputAppliedCoupon amountCents(Integer amountCents) {
    this.amountCents = JsonNullable.<Integer>of(amountCents);
    
    return this;
  }

   /**
   * The amount of the coupon in cents. This field is required only for coupon with &#x60;fixed_amount&#x60; type.
   * @return amountCents
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getAmountCents() {
        return amountCents.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AMOUNT_CENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getAmountCents_JsonNullable() {
    return amountCents;
  }
  
  @JsonProperty(JSON_PROPERTY_AMOUNT_CENTS)
  public void setAmountCents_JsonNullable(JsonNullable<Integer> amountCents) {
    this.amountCents = amountCents;
  }

  public void setAmountCents(Integer amountCents) {
    this.amountCents = JsonNullable.<Integer>of(amountCents);
  }


  public AppliedCouponInputAppliedCoupon amountCurrency(Currency amountCurrency) {
    
    this.amountCurrency = amountCurrency;
    return this;
  }

   /**
   * Get amountCurrency
   * @return amountCurrency
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Currency getAmountCurrency() {
    return amountCurrency;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmountCurrency(Currency amountCurrency) {
    this.amountCurrency = amountCurrency;
  }


  public AppliedCouponInputAppliedCoupon percentageRate(String percentageRate) {
    this.percentageRate = JsonNullable.<String>of(percentageRate);
    
    return this;
  }

   /**
   * The percentage rate of the coupon. This field is required only for coupons with a &#x60;percentage&#x60; coupon type.
   * @return percentageRate
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getPercentageRate() {
        return percentageRate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PERCENTAGE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPercentageRate_JsonNullable() {
    return percentageRate;
  }
  
  @JsonProperty(JSON_PROPERTY_PERCENTAGE_RATE)
  public void setPercentageRate_JsonNullable(JsonNullable<String> percentageRate) {
    this.percentageRate = percentageRate;
  }

  public void setPercentageRate(String percentageRate) {
    this.percentageRate = JsonNullable.<String>of(percentageRate);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppliedCouponInputAppliedCoupon appliedCouponInputAppliedCoupon = (AppliedCouponInputAppliedCoupon) o;
    return Objects.equals(this.externalCustomerId, appliedCouponInputAppliedCoupon.externalCustomerId) &&
        Objects.equals(this.couponCode, appliedCouponInputAppliedCoupon.couponCode) &&
        equalsNullable(this.frequency, appliedCouponInputAppliedCoupon.frequency) &&
        equalsNullable(this.frequencyDuration, appliedCouponInputAppliedCoupon.frequencyDuration) &&
        equalsNullable(this.amountCents, appliedCouponInputAppliedCoupon.amountCents) &&
        Objects.equals(this.amountCurrency, appliedCouponInputAppliedCoupon.amountCurrency) &&
        equalsNullable(this.percentageRate, appliedCouponInputAppliedCoupon.percentageRate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalCustomerId, couponCode, hashCodeNullable(frequency), hashCodeNullable(frequencyDuration), hashCodeNullable(amountCents), amountCurrency, hashCodeNullable(percentageRate));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppliedCouponInputAppliedCoupon {\n");
    sb.append("    externalCustomerId: ").append(toIndentedString(externalCustomerId)).append("\n");
    sb.append("    couponCode: ").append(toIndentedString(couponCode)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    frequencyDuration: ").append(toIndentedString(frequencyDuration)).append("\n");
    sb.append("    amountCents: ").append(toIndentedString(amountCents)).append("\n");
    sb.append("    amountCurrency: ").append(toIndentedString(amountCurrency)).append("\n");
    sb.append("    percentageRate: ").append(toIndentedString(percentageRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

