/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.46.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.CreditObject;
import org.openapitools.client.model.Currency;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppliedCouponObjectExtended
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-31T09:20:28.589842Z[Etc/UTC]")
public class AppliedCouponObjectExtended {
  public static final String SERIALIZED_NAME_LAGO_ID = "lago_id";
  @SerializedName(SERIALIZED_NAME_LAGO_ID)
  private UUID lagoId;

  public static final String SERIALIZED_NAME_LAGO_COUPON_ID = "lago_coupon_id";
  @SerializedName(SERIALIZED_NAME_LAGO_COUPON_ID)
  private UUID lagoCouponId;

  public static final String SERIALIZED_NAME_COUPON_CODE = "coupon_code";
  @SerializedName(SERIALIZED_NAME_COUPON_CODE)
  private String couponCode;

  public static final String SERIALIZED_NAME_COUPON_NAME = "coupon_name";
  @SerializedName(SERIALIZED_NAME_COUPON_NAME)
  private String couponName;

  public static final String SERIALIZED_NAME_LAGO_CUSTOMER_ID = "lago_customer_id";
  @SerializedName(SERIALIZED_NAME_LAGO_CUSTOMER_ID)
  private UUID lagoCustomerId;

  public static final String SERIALIZED_NAME_EXTERNAL_CUSTOMER_ID = "external_customer_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CUSTOMER_ID)
  private String externalCustomerId;

  /**
   * The status of the coupon. Can be either &#x60;active&#x60; or &#x60;terminated&#x60;.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    
    TERMINATED("terminated");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_AMOUNT_CENTS = "amount_cents";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CENTS)
  private Integer amountCents;

  public static final String SERIALIZED_NAME_AMOUNT_CENTS_REMAINING = "amount_cents_remaining";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CENTS_REMAINING)
  private Integer amountCentsRemaining;

  public static final String SERIALIZED_NAME_AMOUNT_CURRENCY = "amount_currency";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CURRENCY)
  private Currency amountCurrency;

  public static final String SERIALIZED_NAME_PERCENTAGE_RATE = "percentage_rate";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_RATE)
  private String percentageRate;

  /**
   * The type of frequency for the coupon. It can have three possible values: &#x60;once&#x60;, &#x60;recurring&#x60; or &#x60;forever&#x60;.  - If set to &#x60;once&#x60;, the coupon is applicable only for a single use. - If set to &#x60;recurring&#x60;, the coupon can be used multiple times for recurring billing periods. - If set to &#x60;forever&#x60;, the coupon has unlimited usage and can be applied indefinitely.
   */
  @JsonAdapter(FrequencyEnum.Adapter.class)
  public enum FrequencyEnum {
    ONCE("once"),
    
    RECURRING("recurring");

    private String value;

    FrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FrequencyEnum fromValue(String value) {
      for (FrequencyEnum b : FrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FrequencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private FrequencyEnum frequency;

  public static final String SERIALIZED_NAME_FREQUENCY_DURATION = "frequency_duration";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_DURATION)
  private Integer frequencyDuration;

  public static final String SERIALIZED_NAME_FREQUENCY_DURATION_REMAINING = "frequency_duration_remaining";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_DURATION_REMAINING)
  private Integer frequencyDurationRemaining;

  public static final String SERIALIZED_NAME_EXPIRATION_AT = "expiration_at";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_AT)
  private OffsetDateTime expirationAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_TERMINATED_AT = "terminated_at";
  @SerializedName(SERIALIZED_NAME_TERMINATED_AT)
  private OffsetDateTime terminatedAt;

  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private List<CreditObject> credits = new ArrayList<>();

  public AppliedCouponObjectExtended() {
  }

  public AppliedCouponObjectExtended lagoId(UUID lagoId) {
    
    this.lagoId = lagoId;
    return this;
  }

   /**
   * Unique identifier of the applied coupon, created by Lago.
   * @return lagoId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoId() {
    return lagoId;
  }


  public void setLagoId(UUID lagoId) {
    this.lagoId = lagoId;
  }


  public AppliedCouponObjectExtended lagoCouponId(UUID lagoCouponId) {
    
    this.lagoCouponId = lagoCouponId;
    return this;
  }

   /**
   * Unique identifier of the coupon, created by Lago.
   * @return lagoCouponId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoCouponId() {
    return lagoCouponId;
  }


  public void setLagoCouponId(UUID lagoCouponId) {
    this.lagoCouponId = lagoCouponId;
  }


  public AppliedCouponObjectExtended couponCode(String couponCode) {
    
    this.couponCode = couponCode;
    return this;
  }

   /**
   * Unique code used to identify the coupon.
   * @return couponCode
  **/
  @javax.annotation.Nonnull
  public String getCouponCode() {
    return couponCode;
  }


  public void setCouponCode(String couponCode) {
    this.couponCode = couponCode;
  }


  public AppliedCouponObjectExtended couponName(String couponName) {
    
    this.couponName = couponName;
    return this;
  }

   /**
   * The name of the coupon.
   * @return couponName
  **/
  @javax.annotation.Nonnull
  public String getCouponName() {
    return couponName;
  }


  public void setCouponName(String couponName) {
    this.couponName = couponName;
  }


  public AppliedCouponObjectExtended lagoCustomerId(UUID lagoCustomerId) {
    
    this.lagoCustomerId = lagoCustomerId;
    return this;
  }

   /**
   * Unique identifier of the customer, created by Lago.
   * @return lagoCustomerId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoCustomerId() {
    return lagoCustomerId;
  }


  public void setLagoCustomerId(UUID lagoCustomerId) {
    this.lagoCustomerId = lagoCustomerId;
  }


  public AppliedCouponObjectExtended externalCustomerId(String externalCustomerId) {
    
    this.externalCustomerId = externalCustomerId;
    return this;
  }

   /**
   * The customer external unique identifier (provided by your own application)
   * @return externalCustomerId
  **/
  @javax.annotation.Nonnull
  public String getExternalCustomerId() {
    return externalCustomerId;
  }


  public void setExternalCustomerId(String externalCustomerId) {
    this.externalCustomerId = externalCustomerId;
  }


  public AppliedCouponObjectExtended status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the coupon. Can be either &#x60;active&#x60; or &#x60;terminated&#x60;.
   * @return status
  **/
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public AppliedCouponObjectExtended amountCents(Integer amountCents) {
    
    this.amountCents = amountCents;
    return this;
  }

   /**
   * The amount of the coupon in cents. This field is required only for coupon with &#x60;fixed_amount&#x60; type.
   * @return amountCents
  **/
  @javax.annotation.Nullable
  public Integer getAmountCents() {
    return amountCents;
  }


  public void setAmountCents(Integer amountCents) {
    this.amountCents = amountCents;
  }


  public AppliedCouponObjectExtended amountCentsRemaining(Integer amountCentsRemaining) {
    
    this.amountCentsRemaining = amountCentsRemaining;
    return this;
  }

   /**
   * The remaining amount in cents for a &#x60;fixed_amount&#x60; coupon with a frequency set to &#x60;once&#x60;. This field indicates the remaining balance or value that can still be utilized from the coupon.
   * @return amountCentsRemaining
  **/
  @javax.annotation.Nullable
  public Integer getAmountCentsRemaining() {
    return amountCentsRemaining;
  }


  public void setAmountCentsRemaining(Integer amountCentsRemaining) {
    this.amountCentsRemaining = amountCentsRemaining;
  }


  public AppliedCouponObjectExtended amountCurrency(Currency amountCurrency) {
    
    this.amountCurrency = amountCurrency;
    return this;
  }

   /**
   * Get amountCurrency
   * @return amountCurrency
  **/
  @javax.annotation.Nullable
  public Currency getAmountCurrency() {
    return amountCurrency;
  }


  public void setAmountCurrency(Currency amountCurrency) {
    this.amountCurrency = amountCurrency;
  }


  public AppliedCouponObjectExtended percentageRate(String percentageRate) {
    
    this.percentageRate = percentageRate;
    return this;
  }

   /**
   * The percentage rate of the coupon. This field is required only for coupons with a &#x60;percentage&#x60; coupon type.
   * @return percentageRate
  **/
  @javax.annotation.Nullable
  public String getPercentageRate() {
    return percentageRate;
  }


  public void setPercentageRate(String percentageRate) {
    this.percentageRate = percentageRate;
  }


  public AppliedCouponObjectExtended frequency(FrequencyEnum frequency) {
    
    this.frequency = frequency;
    return this;
  }

   /**
   * The type of frequency for the coupon. It can have three possible values: &#x60;once&#x60;, &#x60;recurring&#x60; or &#x60;forever&#x60;.  - If set to &#x60;once&#x60;, the coupon is applicable only for a single use. - If set to &#x60;recurring&#x60;, the coupon can be used multiple times for recurring billing periods. - If set to &#x60;forever&#x60;, the coupon has unlimited usage and can be applied indefinitely.
   * @return frequency
  **/
  @javax.annotation.Nonnull
  public FrequencyEnum getFrequency() {
    return frequency;
  }


  public void setFrequency(FrequencyEnum frequency) {
    this.frequency = frequency;
  }


  public AppliedCouponObjectExtended frequencyDuration(Integer frequencyDuration) {
    
    this.frequencyDuration = frequencyDuration;
    return this;
  }

   /**
   * Specifies the number of billing periods to which the coupon applies. This field is required only for coupons with a &#x60;recurring&#x60; frequency type
   * @return frequencyDuration
  **/
  @javax.annotation.Nullable
  public Integer getFrequencyDuration() {
    return frequencyDuration;
  }


  public void setFrequencyDuration(Integer frequencyDuration) {
    this.frequencyDuration = frequencyDuration;
  }


  public AppliedCouponObjectExtended frequencyDurationRemaining(Integer frequencyDurationRemaining) {
    
    this.frequencyDurationRemaining = frequencyDurationRemaining;
    return this;
  }

   /**
   * The remaining number of billing periods to which the coupon is applicable. This field determines the remaining usage or availability of the coupon based on the remaining billing periods.
   * @return frequencyDurationRemaining
  **/
  @javax.annotation.Nullable
  public Integer getFrequencyDurationRemaining() {
    return frequencyDurationRemaining;
  }


  public void setFrequencyDurationRemaining(Integer frequencyDurationRemaining) {
    this.frequencyDurationRemaining = frequencyDurationRemaining;
  }


  public AppliedCouponObjectExtended expirationAt(OffsetDateTime expirationAt) {
    
    this.expirationAt = expirationAt;
    return this;
  }

   /**
   * The date and time after which the coupon will stop applying to customer&#39;s invoices. Once the expiration date is reached, the coupon will no longer be applicable, and any further invoices generated for the customer will not include the coupon discount.
   * @return expirationAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationAt() {
    return expirationAt;
  }


  public void setExpirationAt(OffsetDateTime expirationAt) {
    this.expirationAt = expirationAt;
  }


  public AppliedCouponObjectExtended createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time when the coupon was assigned to a customer. It is expressed in UTC format according to the ISO 8601 datetime standard.
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AppliedCouponObjectExtended terminatedAt(OffsetDateTime terminatedAt) {
    
    this.terminatedAt = terminatedAt;
    return this;
  }

   /**
   * This field indicates the specific moment when the coupon amount is fully utilized or when the coupon is removed from the customer&#39;s coupon list. It is expressed in UTC format according to the ISO 8601 datetime standard.
   * @return terminatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getTerminatedAt() {
    return terminatedAt;
  }


  public void setTerminatedAt(OffsetDateTime terminatedAt) {
    this.terminatedAt = terminatedAt;
  }


  public AppliedCouponObjectExtended credits(List<CreditObject> credits) {
    
    this.credits = credits;
    return this;
  }

  public AppliedCouponObjectExtended addCreditsItem(CreditObject creditsItem) {
    if (this.credits == null) {
      this.credits = new ArrayList<>();
    }
    this.credits.add(creditsItem);
    return this;
  }

   /**
   * Get credits
   * @return credits
  **/
  @javax.annotation.Nonnull
  public List<CreditObject> getCredits() {
    return credits;
  }


  public void setCredits(List<CreditObject> credits) {
    this.credits = credits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppliedCouponObjectExtended appliedCouponObjectExtended = (AppliedCouponObjectExtended) o;
    return Objects.equals(this.lagoId, appliedCouponObjectExtended.lagoId) &&
        Objects.equals(this.lagoCouponId, appliedCouponObjectExtended.lagoCouponId) &&
        Objects.equals(this.couponCode, appliedCouponObjectExtended.couponCode) &&
        Objects.equals(this.couponName, appliedCouponObjectExtended.couponName) &&
        Objects.equals(this.lagoCustomerId, appliedCouponObjectExtended.lagoCustomerId) &&
        Objects.equals(this.externalCustomerId, appliedCouponObjectExtended.externalCustomerId) &&
        Objects.equals(this.status, appliedCouponObjectExtended.status) &&
        Objects.equals(this.amountCents, appliedCouponObjectExtended.amountCents) &&
        Objects.equals(this.amountCentsRemaining, appliedCouponObjectExtended.amountCentsRemaining) &&
        Objects.equals(this.amountCurrency, appliedCouponObjectExtended.amountCurrency) &&
        Objects.equals(this.percentageRate, appliedCouponObjectExtended.percentageRate) &&
        Objects.equals(this.frequency, appliedCouponObjectExtended.frequency) &&
        Objects.equals(this.frequencyDuration, appliedCouponObjectExtended.frequencyDuration) &&
        Objects.equals(this.frequencyDurationRemaining, appliedCouponObjectExtended.frequencyDurationRemaining) &&
        Objects.equals(this.expirationAt, appliedCouponObjectExtended.expirationAt) &&
        Objects.equals(this.createdAt, appliedCouponObjectExtended.createdAt) &&
        Objects.equals(this.terminatedAt, appliedCouponObjectExtended.terminatedAt) &&
        Objects.equals(this.credits, appliedCouponObjectExtended.credits);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(lagoId, lagoCouponId, couponCode, couponName, lagoCustomerId, externalCustomerId, status, amountCents, amountCentsRemaining, amountCurrency, percentageRate, frequency, frequencyDuration, frequencyDurationRemaining, expirationAt, createdAt, terminatedAt, credits);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppliedCouponObjectExtended {\n");
    sb.append("    lagoId: ").append(toIndentedString(lagoId)).append("\n");
    sb.append("    lagoCouponId: ").append(toIndentedString(lagoCouponId)).append("\n");
    sb.append("    couponCode: ").append(toIndentedString(couponCode)).append("\n");
    sb.append("    couponName: ").append(toIndentedString(couponName)).append("\n");
    sb.append("    lagoCustomerId: ").append(toIndentedString(lagoCustomerId)).append("\n");
    sb.append("    externalCustomerId: ").append(toIndentedString(externalCustomerId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    amountCents: ").append(toIndentedString(amountCents)).append("\n");
    sb.append("    amountCentsRemaining: ").append(toIndentedString(amountCentsRemaining)).append("\n");
    sb.append("    amountCurrency: ").append(toIndentedString(amountCurrency)).append("\n");
    sb.append("    percentageRate: ").append(toIndentedString(percentageRate)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    frequencyDuration: ").append(toIndentedString(frequencyDuration)).append("\n");
    sb.append("    frequencyDurationRemaining: ").append(toIndentedString(frequencyDurationRemaining)).append("\n");
    sb.append("    expirationAt: ").append(toIndentedString(expirationAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    terminatedAt: ").append(toIndentedString(terminatedAt)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lago_id");
    openapiFields.add("lago_coupon_id");
    openapiFields.add("coupon_code");
    openapiFields.add("coupon_name");
    openapiFields.add("lago_customer_id");
    openapiFields.add("external_customer_id");
    openapiFields.add("status");
    openapiFields.add("amount_cents");
    openapiFields.add("amount_cents_remaining");
    openapiFields.add("amount_currency");
    openapiFields.add("percentage_rate");
    openapiFields.add("frequency");
    openapiFields.add("frequency_duration");
    openapiFields.add("frequency_duration_remaining");
    openapiFields.add("expiration_at");
    openapiFields.add("created_at");
    openapiFields.add("terminated_at");
    openapiFields.add("credits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lago_id");
    openapiRequiredFields.add("lago_coupon_id");
    openapiRequiredFields.add("coupon_code");
    openapiRequiredFields.add("coupon_name");
    openapiRequiredFields.add("lago_customer_id");
    openapiRequiredFields.add("external_customer_id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("frequency");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("credits");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AppliedCouponObjectExtended
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppliedCouponObjectExtended.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppliedCouponObjectExtended is not found in the empty JSON string", AppliedCouponObjectExtended.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AppliedCouponObjectExtended.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppliedCouponObjectExtended` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppliedCouponObjectExtended.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("lago_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_id").toString()));
      }
      if (!jsonObj.get("lago_coupon_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_coupon_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_coupon_id").toString()));
      }
      if (!jsonObj.get("coupon_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coupon_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coupon_code").toString()));
      }
      if (!jsonObj.get("coupon_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coupon_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coupon_name").toString()));
      }
      if (!jsonObj.get("lago_customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_customer_id").toString()));
      }
      if (!jsonObj.get("external_customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_customer_id").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `amount_currency`
      if (jsonObj.get("amount_currency") != null && !jsonObj.get("amount_currency").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("amount_currency"));
      }
      if ((jsonObj.get("percentage_rate") != null && !jsonObj.get("percentage_rate").isJsonNull()) && !jsonObj.get("percentage_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentage_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentage_rate").toString()));
      }
      if (!jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("credits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `credits` to be an array in the JSON string but got `%s`", jsonObj.get("credits").toString()));
      }

      JsonArray jsonArraycredits = jsonObj.getAsJsonArray("credits");
      // validate the required field `credits` (array)
      for (int i = 0; i < jsonArraycredits.size(); i++) {
        CreditObject.validateJsonElement(jsonArraycredits.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppliedCouponObjectExtended.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppliedCouponObjectExtended' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppliedCouponObjectExtended> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppliedCouponObjectExtended.class));

       return (TypeAdapter<T>) new TypeAdapter<AppliedCouponObjectExtended>() {
           @Override
           public void write(JsonWriter out, AppliedCouponObjectExtended value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppliedCouponObjectExtended read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppliedCouponObjectExtended given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppliedCouponObjectExtended
  * @throws IOException if the JSON string is invalid with respect to AppliedCouponObjectExtended
  */
  public static AppliedCouponObjectExtended fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppliedCouponObjectExtended.class);
  }

 /**
  * Convert an instance of AppliedCouponObjectExtended to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

