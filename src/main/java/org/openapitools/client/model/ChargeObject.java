/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.46.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ChargeObjectProperties;
import org.openapitools.client.model.GroupPropertiesObject;
import org.openapitools.client.model.TaxObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChargeObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-31T09:24:39.843670Z[Etc/UTC]")
public class ChargeObject {
  public static final String SERIALIZED_NAME_LAGO_ID = "lago_id";
  @SerializedName(SERIALIZED_NAME_LAGO_ID)
  private UUID lagoId;

  public static final String SERIALIZED_NAME_LAGO_BILLABLE_METRIC_ID = "lago_billable_metric_id";
  @SerializedName(SERIALIZED_NAME_LAGO_BILLABLE_METRIC_ID)
  private UUID lagoBillableMetricId;

  public static final String SERIALIZED_NAME_BILLABLE_METRIC_CODE = "billable_metric_code";
  @SerializedName(SERIALIZED_NAME_BILLABLE_METRIC_CODE)
  private String billableMetricCode;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * Specifies the pricing model used for the calculation of the final fee. It can be &#x60;standard&#x60;, &#x60;graduated&#x60;, &#x60;graduated_percentage&#x60;, &#x60;package&#x60;, &#x60;percentage&#x60; or &#x60;volume&#x60;.
   */
  @JsonAdapter(ChargeModelEnum.Adapter.class)
  public enum ChargeModelEnum {
    STANDARD("standard"),
    
    GRADUATED("graduated"),
    
    GRADUATED_PERCENTAGE("graduated_percentage"),
    
    PACKAGE("package"),
    
    PERCENTAGE("percentage"),
    
    VOLUME("volume");

    private String value;

    ChargeModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChargeModelEnum fromValue(String value) {
      for (ChargeModelEnum b : ChargeModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChargeModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargeModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChargeModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChargeModelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHARGE_MODEL = "charge_model";
  @SerializedName(SERIALIZED_NAME_CHARGE_MODEL)
  private ChargeModelEnum chargeModel;

  public static final String SERIALIZED_NAME_PAY_IN_ADVANCE = "pay_in_advance";
  @SerializedName(SERIALIZED_NAME_PAY_IN_ADVANCE)
  private Boolean payInAdvance;

  public static final String SERIALIZED_NAME_INVOICEABLE = "invoiceable";
  @SerializedName(SERIALIZED_NAME_INVOICEABLE)
  private Boolean invoiceable;

  public static final String SERIALIZED_NAME_PRORATED = "prorated";
  @SerializedName(SERIALIZED_NAME_PRORATED)
  private Boolean prorated;

  public static final String SERIALIZED_NAME_MIN_AMOUNT_CENTS = "min_amount_cents";
  @SerializedName(SERIALIZED_NAME_MIN_AMOUNT_CENTS)
  private Integer minAmountCents;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private ChargeObjectProperties properties;

  public static final String SERIALIZED_NAME_GROUP_PROPERTIES = "group_properties";
  @SerializedName(SERIALIZED_NAME_GROUP_PROPERTIES)
  private List<GroupPropertiesObject> groupProperties;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private List<TaxObject> taxes;

  public ChargeObject() {
  }

  public ChargeObject lagoId(UUID lagoId) {
    
    this.lagoId = lagoId;
    return this;
  }

   /**
   * Unique identifier of charge, created by Lago.
   * @return lagoId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoId() {
    return lagoId;
  }


  public void setLagoId(UUID lagoId) {
    this.lagoId = lagoId;
  }


  public ChargeObject lagoBillableMetricId(UUID lagoBillableMetricId) {
    
    this.lagoBillableMetricId = lagoBillableMetricId;
    return this;
  }

   /**
   * Unique identifier of the billable metric created by Lago.
   * @return lagoBillableMetricId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoBillableMetricId() {
    return lagoBillableMetricId;
  }


  public void setLagoBillableMetricId(UUID lagoBillableMetricId) {
    this.lagoBillableMetricId = lagoBillableMetricId;
  }


  public ChargeObject billableMetricCode(String billableMetricCode) {
    
    this.billableMetricCode = billableMetricCode;
    return this;
  }

   /**
   * Unique code identifying a billable metric.
   * @return billableMetricCode
  **/
  @javax.annotation.Nonnull
  public String getBillableMetricCode() {
    return billableMetricCode;
  }


  public void setBillableMetricCode(String billableMetricCode) {
    this.billableMetricCode = billableMetricCode;
  }


  public ChargeObject createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time when the charge was created. It is expressed in UTC format according to the ISO 8601 datetime standard.
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ChargeObject chargeModel(ChargeModelEnum chargeModel) {
    
    this.chargeModel = chargeModel;
    return this;
  }

   /**
   * Specifies the pricing model used for the calculation of the final fee. It can be &#x60;standard&#x60;, &#x60;graduated&#x60;, &#x60;graduated_percentage&#x60;, &#x60;package&#x60;, &#x60;percentage&#x60; or &#x60;volume&#x60;.
   * @return chargeModel
  **/
  @javax.annotation.Nonnull
  public ChargeModelEnum getChargeModel() {
    return chargeModel;
  }


  public void setChargeModel(ChargeModelEnum chargeModel) {
    this.chargeModel = chargeModel;
  }


  public ChargeObject payInAdvance(Boolean payInAdvance) {
    
    this.payInAdvance = payInAdvance;
    return this;
  }

   /**
   * This field determines the billing timing for this specific usage-based charge. When set to &#x60;true&#x60;, the charge is due and invoiced immediately. Conversely, when set to &#x60;false&#x60;, the charge is due and invoiced at the end of each billing period.
   * @return payInAdvance
  **/
  @javax.annotation.Nullable
  public Boolean getPayInAdvance() {
    return payInAdvance;
  }


  public void setPayInAdvance(Boolean payInAdvance) {
    this.payInAdvance = payInAdvance;
  }


  public ChargeObject invoiceable(Boolean invoiceable) {
    
    this.invoiceable = invoiceable;
    return this;
  }

   /**
   * This field specifies whether the charge should be included in a proper invoice. If set to &#x60;false&#x60;, no invoice will be issued for this charge. You can only set it to &#x60;false&#x60; when &#x60;pay_in_advance&#x60; is &#x60;true&#x60;.
   * @return invoiceable
  **/
  @javax.annotation.Nullable
  public Boolean getInvoiceable() {
    return invoiceable;
  }


  public void setInvoiceable(Boolean invoiceable) {
    this.invoiceable = invoiceable;
  }


  public ChargeObject prorated(Boolean prorated) {
    
    this.prorated = prorated;
    return this;
  }

   /**
   * Specifies whether a charge is prorated based on the remaining number of days in the billing period or billed fully.  - If set to &#x60;true&#x60;, the charge is prorated based on the remaining days in the current billing period. - If set to &#x60;false&#x60;, the charge is billed in full. - If not defined in the request, default value is &#x60;false&#x60;.
   * @return prorated
  **/
  @javax.annotation.Nullable
  public Boolean getProrated() {
    return prorated;
  }


  public void setProrated(Boolean prorated) {
    this.prorated = prorated;
  }


  public ChargeObject minAmountCents(Integer minAmountCents) {
    
    this.minAmountCents = minAmountCents;
    return this;
  }

   /**
   * The minimum spending amount required for the charge, measured in cents and excluding any applicable taxes. It indicates the minimum amount that needs to be charged for each billing period.
   * @return minAmountCents
  **/
  @javax.annotation.Nullable
  public Integer getMinAmountCents() {
    return minAmountCents;
  }


  public void setMinAmountCents(Integer minAmountCents) {
    this.minAmountCents = minAmountCents;
  }


  public ChargeObject properties(ChargeObjectProperties properties) {
    
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  public ChargeObjectProperties getProperties() {
    return properties;
  }


  public void setProperties(ChargeObjectProperties properties) {
    this.properties = properties;
  }


  public ChargeObject groupProperties(List<GroupPropertiesObject> groupProperties) {
    
    this.groupProperties = groupProperties;
    return this;
  }

  public ChargeObject addGroupPropertiesItem(GroupPropertiesObject groupPropertiesItem) {
    if (this.groupProperties == null) {
      this.groupProperties = new ArrayList<>();
    }
    this.groupProperties.add(groupPropertiesItem);
    return this;
  }

   /**
   * All charge information, sorted by groups.
   * @return groupProperties
  **/
  @javax.annotation.Nullable
  public List<GroupPropertiesObject> getGroupProperties() {
    return groupProperties;
  }


  public void setGroupProperties(List<GroupPropertiesObject> groupProperties) {
    this.groupProperties = groupProperties;
  }


  public ChargeObject taxes(List<TaxObject> taxes) {
    
    this.taxes = taxes;
    return this;
  }

  public ChargeObject addTaxesItem(TaxObject taxesItem) {
    if (this.taxes == null) {
      this.taxes = new ArrayList<>();
    }
    this.taxes.add(taxesItem);
    return this;
  }

   /**
   * All taxes applied to the charge.
   * @return taxes
  **/
  @javax.annotation.Nullable
  public List<TaxObject> getTaxes() {
    return taxes;
  }


  public void setTaxes(List<TaxObject> taxes) {
    this.taxes = taxes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargeObject chargeObject = (ChargeObject) o;
    return Objects.equals(this.lagoId, chargeObject.lagoId) &&
        Objects.equals(this.lagoBillableMetricId, chargeObject.lagoBillableMetricId) &&
        Objects.equals(this.billableMetricCode, chargeObject.billableMetricCode) &&
        Objects.equals(this.createdAt, chargeObject.createdAt) &&
        Objects.equals(this.chargeModel, chargeObject.chargeModel) &&
        Objects.equals(this.payInAdvance, chargeObject.payInAdvance) &&
        Objects.equals(this.invoiceable, chargeObject.invoiceable) &&
        Objects.equals(this.prorated, chargeObject.prorated) &&
        Objects.equals(this.minAmountCents, chargeObject.minAmountCents) &&
        Objects.equals(this.properties, chargeObject.properties) &&
        Objects.equals(this.groupProperties, chargeObject.groupProperties) &&
        Objects.equals(this.taxes, chargeObject.taxes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lagoId, lagoBillableMetricId, billableMetricCode, createdAt, chargeModel, payInAdvance, invoiceable, prorated, minAmountCents, properties, groupProperties, taxes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargeObject {\n");
    sb.append("    lagoId: ").append(toIndentedString(lagoId)).append("\n");
    sb.append("    lagoBillableMetricId: ").append(toIndentedString(lagoBillableMetricId)).append("\n");
    sb.append("    billableMetricCode: ").append(toIndentedString(billableMetricCode)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    chargeModel: ").append(toIndentedString(chargeModel)).append("\n");
    sb.append("    payInAdvance: ").append(toIndentedString(payInAdvance)).append("\n");
    sb.append("    invoiceable: ").append(toIndentedString(invoiceable)).append("\n");
    sb.append("    prorated: ").append(toIndentedString(prorated)).append("\n");
    sb.append("    minAmountCents: ").append(toIndentedString(minAmountCents)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    groupProperties: ").append(toIndentedString(groupProperties)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lago_id");
    openapiFields.add("lago_billable_metric_id");
    openapiFields.add("billable_metric_code");
    openapiFields.add("created_at");
    openapiFields.add("charge_model");
    openapiFields.add("pay_in_advance");
    openapiFields.add("invoiceable");
    openapiFields.add("prorated");
    openapiFields.add("min_amount_cents");
    openapiFields.add("properties");
    openapiFields.add("group_properties");
    openapiFields.add("taxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lago_id");
    openapiRequiredFields.add("lago_billable_metric_id");
    openapiRequiredFields.add("billable_metric_code");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("charge_model");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ChargeObject
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChargeObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChargeObject is not found in the empty JSON string", ChargeObject.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ChargeObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChargeObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChargeObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("lago_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_id").toString()));
      }
      if (!jsonObj.get("lago_billable_metric_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_billable_metric_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_billable_metric_id").toString()));
      }
      if (!jsonObj.get("billable_metric_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billable_metric_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billable_metric_code").toString()));
      }
      if (!jsonObj.get("charge_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charge_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charge_model").toString()));
      }
      // validate the optional field `properties`
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        ChargeObjectProperties.validateJsonElement(jsonObj.get("properties"));
      }
      if (jsonObj.get("group_properties") != null && !jsonObj.get("group_properties").isJsonNull()) {
        JsonArray jsonArraygroupProperties = jsonObj.getAsJsonArray("group_properties");
        if (jsonArraygroupProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("group_properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `group_properties` to be an array in the JSON string but got `%s`", jsonObj.get("group_properties").toString()));
          }

          // validate the optional field `group_properties` (array)
          for (int i = 0; i < jsonArraygroupProperties.size(); i++) {
            GroupPropertiesObject.validateJsonElement(jsonArraygroupProperties.get(i));
          };
        }
      }
      if (jsonObj.get("taxes") != null && !jsonObj.get("taxes").isJsonNull()) {
        JsonArray jsonArraytaxes = jsonObj.getAsJsonArray("taxes");
        if (jsonArraytaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxes` to be an array in the JSON string but got `%s`", jsonObj.get("taxes").toString()));
          }

          // validate the optional field `taxes` (array)
          for (int i = 0; i < jsonArraytaxes.size(); i++) {
            TaxObject.validateJsonElement(jsonArraytaxes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChargeObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChargeObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChargeObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChargeObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ChargeObject>() {
           @Override
           public void write(JsonWriter out, ChargeObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChargeObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChargeObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChargeObject
  * @throws IOException if the JSON string is invalid with respect to ChargeObject
  */
  public static ChargeObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChargeObject.class);
  }

 /**
  * Convert an instance of ChargeObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

