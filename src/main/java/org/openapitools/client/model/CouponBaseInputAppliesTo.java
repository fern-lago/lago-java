/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.46.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Set coupon limitations to plans or specific metrics.
 */
@JsonPropertyOrder({
  CouponBaseInputAppliesTo.JSON_PROPERTY_PLAN_CODES,
  CouponBaseInputAppliesTo.JSON_PROPERTY_BILLABLE_METRIC_CODES
})
@JsonTypeName("CouponBaseInput_applies_to")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-31T15:04:44.084574Z[Etc/UTC]")
public class CouponBaseInputAppliesTo {
  public static final String JSON_PROPERTY_PLAN_CODES = "plan_codes";
  private JsonNullable<List<String>> planCodes = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_BILLABLE_METRIC_CODES = "billable_metric_codes";
  private JsonNullable<List<String>> billableMetricCodes = JsonNullable.<List<String>>undefined();

  public CouponBaseInputAppliesTo() {
  }

  public CouponBaseInputAppliesTo planCodes(List<String> planCodes) {
    this.planCodes = JsonNullable.<List<String>>of(planCodes);
    
    return this;
  }

  public CouponBaseInputAppliesTo addPlanCodesItem(String planCodesItem) {
    if (this.planCodes == null || !this.planCodes.isPresent()) {
      this.planCodes = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.planCodes.get().add(planCodesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * An array of plan codes to which the coupon is applicable. By specifying the plan codes in this field, you can restrict the coupon&#39;s usage to specific plans only.
   * @return planCodes
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public List<String> getPlanCodes() {
        return planCodes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PLAN_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getPlanCodes_JsonNullable() {
    return planCodes;
  }
  
  @JsonProperty(JSON_PROPERTY_PLAN_CODES)
  public void setPlanCodes_JsonNullable(JsonNullable<List<String>> planCodes) {
    this.planCodes = planCodes;
  }

  public void setPlanCodes(List<String> planCodes) {
    this.planCodes = JsonNullable.<List<String>>of(planCodes);
  }


  public CouponBaseInputAppliesTo billableMetricCodes(List<String> billableMetricCodes) {
    this.billableMetricCodes = JsonNullable.<List<String>>of(billableMetricCodes);
    
    return this;
  }

  public CouponBaseInputAppliesTo addBillableMetricCodesItem(String billableMetricCodesItem) {
    if (this.billableMetricCodes == null || !this.billableMetricCodes.isPresent()) {
      this.billableMetricCodes = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.billableMetricCodes.get().add(billableMetricCodesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * An array of billable metric codes to which the coupon is applicable. By specifying the billable metric codes in this field, you can restrict the coupon&#39;s usage to specific metrics only.
   * @return billableMetricCodes
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public List<String> getBillableMetricCodes() {
        return billableMetricCodes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BILLABLE_METRIC_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getBillableMetricCodes_JsonNullable() {
    return billableMetricCodes;
  }
  
  @JsonProperty(JSON_PROPERTY_BILLABLE_METRIC_CODES)
  public void setBillableMetricCodes_JsonNullable(JsonNullable<List<String>> billableMetricCodes) {
    this.billableMetricCodes = billableMetricCodes;
  }

  public void setBillableMetricCodes(List<String> billableMetricCodes) {
    this.billableMetricCodes = JsonNullable.<List<String>>of(billableMetricCodes);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CouponBaseInputAppliesTo couponBaseInputAppliesTo = (CouponBaseInputAppliesTo) o;
    return equalsNullable(this.planCodes, couponBaseInputAppliesTo.planCodes) &&
        equalsNullable(this.billableMetricCodes, couponBaseInputAppliesTo.billableMetricCodes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(planCodes), hashCodeNullable(billableMetricCodes));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponBaseInputAppliesTo {\n");
    sb.append("    planCodes: ").append(toIndentedString(planCodes)).append("\n");
    sb.append("    billableMetricCodes: ").append(toIndentedString(billableMetricCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

