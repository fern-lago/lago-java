/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.46.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.openapitools.client.model.Currency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppliedAddOnObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-31T09:20:28.589842Z[Etc/UTC]")
public class AppliedAddOnObject {
  public static final String SERIALIZED_NAME_LAGO_ID = "lago_id";
  @SerializedName(SERIALIZED_NAME_LAGO_ID)
  private UUID lagoId;

  public static final String SERIALIZED_NAME_LAGO_ADD_ON_ID = "lago_add_on_id";
  @SerializedName(SERIALIZED_NAME_LAGO_ADD_ON_ID)
  private UUID lagoAddOnId;

  public static final String SERIALIZED_NAME_ADD_ON_CODE = "add_on_code";
  @SerializedName(SERIALIZED_NAME_ADD_ON_CODE)
  private String addOnCode;

  public static final String SERIALIZED_NAME_LAGO_CUSTOMER_ID = "lago_customer_id";
  @SerializedName(SERIALIZED_NAME_LAGO_CUSTOMER_ID)
  private UUID lagoCustomerId;

  public static final String SERIALIZED_NAME_EXTERNAL_CUSTOMER_ID = "external_customer_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CUSTOMER_ID)
  private String externalCustomerId;

  public static final String SERIALIZED_NAME_AMOUNT_CENTS = "amount_cents";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CENTS)
  private Integer amountCents;

  public static final String SERIALIZED_NAME_AMOUNT_CURRENCY = "amount_currency";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CURRENCY)
  private Currency amountCurrency;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public AppliedAddOnObject() {
  }

  public AppliedAddOnObject lagoId(UUID lagoId) {
    
    this.lagoId = lagoId;
    return this;
  }

   /**
   * Unique identifier of the applied add-on created by Lago.
   * @return lagoId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoId() {
    return lagoId;
  }


  public void setLagoId(UUID lagoId) {
    this.lagoId = lagoId;
  }


  public AppliedAddOnObject lagoAddOnId(UUID lagoAddOnId) {
    
    this.lagoAddOnId = lagoAddOnId;
    return this;
  }

   /**
   * Unique identifier of the add-on created by Lago.
   * @return lagoAddOnId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoAddOnId() {
    return lagoAddOnId;
  }


  public void setLagoAddOnId(UUID lagoAddOnId) {
    this.lagoAddOnId = lagoAddOnId;
  }


  public AppliedAddOnObject addOnCode(String addOnCode) {
    
    this.addOnCode = addOnCode;
    return this;
  }

   /**
   * Unique code used to identify the add-on.
   * @return addOnCode
  **/
  @javax.annotation.Nonnull
  public String getAddOnCode() {
    return addOnCode;
  }


  public void setAddOnCode(String addOnCode) {
    this.addOnCode = addOnCode;
  }


  public AppliedAddOnObject lagoCustomerId(UUID lagoCustomerId) {
    
    this.lagoCustomerId = lagoCustomerId;
    return this;
  }

   /**
   * Unique identifier of the customer created by Lago.
   * @return lagoCustomerId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoCustomerId() {
    return lagoCustomerId;
  }


  public void setLagoCustomerId(UUID lagoCustomerId) {
    this.lagoCustomerId = lagoCustomerId;
  }


  public AppliedAddOnObject externalCustomerId(String externalCustomerId) {
    
    this.externalCustomerId = externalCustomerId;
    return this;
  }

   /**
   * The customer external unique identifier (provided by your own application)
   * @return externalCustomerId
  **/
  @javax.annotation.Nonnull
  public String getExternalCustomerId() {
    return externalCustomerId;
  }


  public void setExternalCustomerId(String externalCustomerId) {
    this.externalCustomerId = externalCustomerId;
  }


  public AppliedAddOnObject amountCents(Integer amountCents) {
    
    this.amountCents = amountCents;
    return this;
  }

   /**
   * The cost of the add-on in cents, excluding any applicable taxes, that is billed to a customer. By creating a one-off invoice, you will be able to override this value.
   * @return amountCents
  **/
  @javax.annotation.Nonnull
  public Integer getAmountCents() {
    return amountCents;
  }


  public void setAmountCents(Integer amountCents) {
    this.amountCents = amountCents;
  }


  public AppliedAddOnObject amountCurrency(Currency amountCurrency) {
    
    this.amountCurrency = amountCurrency;
    return this;
  }

   /**
   * Get amountCurrency
   * @return amountCurrency
  **/
  @javax.annotation.Nonnull
  public Currency getAmountCurrency() {
    return amountCurrency;
  }


  public void setAmountCurrency(Currency amountCurrency) {
    this.amountCurrency = amountCurrency;
  }


  public AppliedAddOnObject createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppliedAddOnObject appliedAddOnObject = (AppliedAddOnObject) o;
    return Objects.equals(this.lagoId, appliedAddOnObject.lagoId) &&
        Objects.equals(this.lagoAddOnId, appliedAddOnObject.lagoAddOnId) &&
        Objects.equals(this.addOnCode, appliedAddOnObject.addOnCode) &&
        Objects.equals(this.lagoCustomerId, appliedAddOnObject.lagoCustomerId) &&
        Objects.equals(this.externalCustomerId, appliedAddOnObject.externalCustomerId) &&
        Objects.equals(this.amountCents, appliedAddOnObject.amountCents) &&
        Objects.equals(this.amountCurrency, appliedAddOnObject.amountCurrency) &&
        Objects.equals(this.createdAt, appliedAddOnObject.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lagoId, lagoAddOnId, addOnCode, lagoCustomerId, externalCustomerId, amountCents, amountCurrency, createdAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppliedAddOnObject {\n");
    sb.append("    lagoId: ").append(toIndentedString(lagoId)).append("\n");
    sb.append("    lagoAddOnId: ").append(toIndentedString(lagoAddOnId)).append("\n");
    sb.append("    addOnCode: ").append(toIndentedString(addOnCode)).append("\n");
    sb.append("    lagoCustomerId: ").append(toIndentedString(lagoCustomerId)).append("\n");
    sb.append("    externalCustomerId: ").append(toIndentedString(externalCustomerId)).append("\n");
    sb.append("    amountCents: ").append(toIndentedString(amountCents)).append("\n");
    sb.append("    amountCurrency: ").append(toIndentedString(amountCurrency)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lago_id");
    openapiFields.add("lago_add_on_id");
    openapiFields.add("add_on_code");
    openapiFields.add("lago_customer_id");
    openapiFields.add("external_customer_id");
    openapiFields.add("amount_cents");
    openapiFields.add("amount_currency");
    openapiFields.add("created_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lago_id");
    openapiRequiredFields.add("lago_add_on_id");
    openapiRequiredFields.add("add_on_code");
    openapiRequiredFields.add("lago_customer_id");
    openapiRequiredFields.add("external_customer_id");
    openapiRequiredFields.add("amount_cents");
    openapiRequiredFields.add("amount_currency");
    openapiRequiredFields.add("created_at");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AppliedAddOnObject
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppliedAddOnObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppliedAddOnObject is not found in the empty JSON string", AppliedAddOnObject.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AppliedAddOnObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppliedAddOnObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppliedAddOnObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("lago_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_id").toString()));
      }
      if (!jsonObj.get("lago_add_on_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_add_on_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_add_on_id").toString()));
      }
      if (!jsonObj.get("add_on_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `add_on_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("add_on_code").toString()));
      }
      if (!jsonObj.get("lago_customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_customer_id").toString()));
      }
      if (!jsonObj.get("external_customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_customer_id").toString()));
      }
      // validate the required field `amount_currency`
      Currency.validateJsonElement(jsonObj.get("amount_currency"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppliedAddOnObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppliedAddOnObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppliedAddOnObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppliedAddOnObject.class));

       return (TypeAdapter<T>) new TypeAdapter<AppliedAddOnObject>() {
           @Override
           public void write(JsonWriter out, AppliedAddOnObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppliedAddOnObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppliedAddOnObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppliedAddOnObject
  * @throws IOException if the JSON string is invalid with respect to AppliedAddOnObject
  */
  public static AppliedAddOnObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppliedAddOnObject.class);
  }

 /**
  * Convert an instance of AppliedAddOnObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

