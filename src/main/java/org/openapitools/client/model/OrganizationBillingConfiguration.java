/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.46.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The custom billing settings for your organization.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-31T09:24:39.843670Z[Etc/UTC]")
public class OrganizationBillingConfiguration {
  public static final String SERIALIZED_NAME_INVOICE_FOOTER = "invoice_footer";
  @SerializedName(SERIALIZED_NAME_INVOICE_FOOTER)
  private String invoiceFooter;

  public static final String SERIALIZED_NAME_INVOICE_GRACE_PERIOD = "invoice_grace_period";
  @SerializedName(SERIALIZED_NAME_INVOICE_GRACE_PERIOD)
  private Integer invoiceGracePeriod;

  public static final String SERIALIZED_NAME_DOCUMENT_LOCALE = "document_locale";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_LOCALE)
  private String documentLocale;

  public OrganizationBillingConfiguration() {
  }

  public OrganizationBillingConfiguration invoiceFooter(String invoiceFooter) {
    
    this.invoiceFooter = invoiceFooter;
    return this;
  }

   /**
   * The customer invoice message that appears at the bottom of each billing documents.
   * @return invoiceFooter
  **/
  @javax.annotation.Nullable
  public String getInvoiceFooter() {
    return invoiceFooter;
  }


  public void setInvoiceFooter(String invoiceFooter) {
    this.invoiceFooter = invoiceFooter;
  }


  public OrganizationBillingConfiguration invoiceGracePeriod(Integer invoiceGracePeriod) {
    
    this.invoiceGracePeriod = invoiceGracePeriod;
    return this;
  }

   /**
   * The grace period, expressed in days, for finalizing the invoice. This period refers to the additional time granted to your customers beyond the invoice due date to adjust usage and line items. Can be overwritten by the customerâ€™s grace period.
   * @return invoiceGracePeriod
  **/
  @javax.annotation.Nullable
  public Integer getInvoiceGracePeriod() {
    return invoiceGracePeriod;
  }


  public void setInvoiceGracePeriod(Integer invoiceGracePeriod) {
    this.invoiceGracePeriod = invoiceGracePeriod;
  }


  public OrganizationBillingConfiguration documentLocale(String documentLocale) {
    
    this.documentLocale = documentLocale;
    return this;
  }

   /**
   * The locale of the billing documents, expressed in the ISO 639-1 format. This field indicates the language or regional variant used for the documents content issued or the embeddable customer portal.
   * @return documentLocale
  **/
  @javax.annotation.Nullable
  public String getDocumentLocale() {
    return documentLocale;
  }


  public void setDocumentLocale(String documentLocale) {
    this.documentLocale = documentLocale;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationBillingConfiguration organizationBillingConfiguration = (OrganizationBillingConfiguration) o;
    return Objects.equals(this.invoiceFooter, organizationBillingConfiguration.invoiceFooter) &&
        Objects.equals(this.invoiceGracePeriod, organizationBillingConfiguration.invoiceGracePeriod) &&
        Objects.equals(this.documentLocale, organizationBillingConfiguration.documentLocale);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(invoiceFooter, invoiceGracePeriod, documentLocale);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationBillingConfiguration {\n");
    sb.append("    invoiceFooter: ").append(toIndentedString(invoiceFooter)).append("\n");
    sb.append("    invoiceGracePeriod: ").append(toIndentedString(invoiceGracePeriod)).append("\n");
    sb.append("    documentLocale: ").append(toIndentedString(documentLocale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("invoice_footer");
    openapiFields.add("invoice_grace_period");
    openapiFields.add("document_locale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OrganizationBillingConfiguration
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrganizationBillingConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationBillingConfiguration is not found in the empty JSON string", OrganizationBillingConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrganizationBillingConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganizationBillingConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("invoice_footer") != null && !jsonObj.get("invoice_footer").isJsonNull()) && !jsonObj.get("invoice_footer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_footer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_footer").toString()));
      }
      if ((jsonObj.get("document_locale") != null && !jsonObj.get("document_locale").isJsonNull()) && !jsonObj.get("document_locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_locale").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationBillingConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationBillingConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationBillingConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationBillingConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationBillingConfiguration>() {
           @Override
           public void write(JsonWriter out, OrganizationBillingConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationBillingConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrganizationBillingConfiguration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrganizationBillingConfiguration
  * @throws IOException if the JSON string is invalid with respect to OrganizationBillingConfiguration
  */
  public static OrganizationBillingConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationBillingConfiguration.class);
  }

 /**
  * Convert an instance of OrganizationBillingConfiguration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

