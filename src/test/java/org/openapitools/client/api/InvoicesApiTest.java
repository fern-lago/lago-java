/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.46.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiErrorBadRequest;
import org.openapitools.client.model.ApiErrorNotAllowed;
import org.openapitools.client.model.ApiErrorNotFound;
import org.openapitools.client.model.ApiErrorUnauthorized;
import org.openapitools.client.model.ApiErrorUnprocessableEntity;
import org.openapitools.client.model.Invoice;
import org.openapitools.client.model.InvoiceOneOffCreateInput;
import org.openapitools.client.model.InvoiceUpdateInput;
import org.openapitools.client.model.InvoicesPaginated;
import java.time.LocalDate;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InvoicesApi
 */
@Disabled
public class InvoicesApiTest {

    private final InvoicesApi api = new InvoicesApi();

    /**
     * Create a one-off invoice
     *
     * This endpoint is used for issuing a one-off invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInvoiceTest() throws ApiException {
        InvoiceOneOffCreateInput invoiceOneOffCreateInput = null;
        Invoice response = api.createInvoice(invoiceOneOffCreateInput);
        // TODO: test validations
    }

    /**
     * Download an invoice PDF
     *
     * This endpoint is used for downloading a specific invoice PDF document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadInvoiceTest() throws ApiException {
        UUID lagoId = null;
        Invoice response = api.downloadInvoice(lagoId);
        // TODO: test validations
    }

    /**
     * Finalize a draft invoice
     *
     * This endpoint is used for finalizing a draft invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void finalizeInvoiceTest() throws ApiException {
        UUID lagoId = null;
        Invoice response = api.finalizeInvoice(lagoId);
        // TODO: test validations
    }

    /**
     * List all invoices
     *
     * This endpoint is used for retrievign all invoices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAllInvoicesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        String externalCustomerId = null;
        LocalDate issuingDateFrom = null;
        LocalDate issuingDateTo = null;
        String status = null;
        String paymentStatus = null;
        InvoicesPaginated response = api.findAllInvoices(page, perPage, externalCustomerId, issuingDateFrom, issuingDateTo, status, paymentStatus);
        // TODO: test validations
    }

    /**
     * Retrieve an invoice
     *
     * This endpoint is used for retrieving a specific invoice that has been issued.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findInvoiceTest() throws ApiException {
        UUID lagoId = null;
        Invoice response = api.findInvoice(lagoId);
        // TODO: test validations
    }

    /**
     * Refresh a draft invoice
     *
     * This endpoint is used for refreshing a draft invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshInvoiceTest() throws ApiException {
        UUID lagoId = null;
        Invoice response = api.refreshInvoice(lagoId);
        // TODO: test validations
    }

    /**
     * Retry an invoice payment
     *
     * This endpoint resends an invoice for collection and retry a payment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retryPaymentTest() throws ApiException {
        UUID lagoId = null;
        api.retryPayment(lagoId);
        // TODO: test validations
    }

    /**
     * Update an invoice
     *
     * This endpoint is used for updating an existing invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInvoiceTest() throws ApiException {
        UUID lagoId = null;
        InvoiceUpdateInput invoiceUpdateInput = null;
        Invoice response = api.updateInvoice(lagoId, invoiceUpdateInput);
        // TODO: test validations
    }

}
