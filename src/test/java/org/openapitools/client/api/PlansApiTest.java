/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.46.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiErrorBadRequest;
import org.openapitools.client.model.ApiErrorNotFound;
import org.openapitools.client.model.ApiErrorUnauthorized;
import org.openapitools.client.model.ApiErrorUnprocessableEntity;
import org.openapitools.client.model.Plan;
import org.openapitools.client.model.PlanCreateInput;
import org.openapitools.client.model.PlanUpdateInput;
import org.openapitools.client.model.PlansPaginated;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlansApi
 */
@Disabled
public class PlansApiTest {

    private final PlansApi api = new PlansApi();

    /**
     * Create a plan
     *
     * This endpoint creates a plan with subscription and usage-based charges. It supports flexible billing cadence (in-advance or in-arrears) and allows for both recurring and metered charges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPlanTest() throws ApiException {
        PlanCreateInput planCreateInput = null;
        Plan response = api.createPlan(planCreateInput);
        // TODO: test validations
    }

    /**
     * Delete a plan
     *
     * This endpoint deletes a specific plan. Note that this plan could be associated with active subscriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destroyPlanTest() throws ApiException {
        String code = null;
        Plan response = api.destroyPlan(code);
        // TODO: test validations
    }

    /**
     * List all plans
     *
     * This endpoint retrieves all existing plans.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAllPlansTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        PlansPaginated response = api.findAllPlans(page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve a plan
     *
     * This endpoint retrieves a specific plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findPlanTest() throws ApiException {
        String code = null;
        Plan response = api.findPlan(code);
        // TODO: test validations
    }

    /**
     * Update a plan
     *
     * This endpoint updates a specific plan with subscription and usage-based charges. It supports flexible billing cadence (in-advance or in-arrears) and allows for both recurring and metered charges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePlanTest() throws ApiException {
        String code = null;
        PlanUpdateInput planUpdateInput = null;
        Plan response = api.updatePlan(code, planUpdateInput);
        // TODO: test validations
    }

}
