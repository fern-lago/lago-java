/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.46.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddOn;
import org.openapitools.client.model.AddOnCreateInput;
import org.openapitools.client.model.AddOnUpdateInput;
import org.openapitools.client.model.AddOnsPaginated;
import org.openapitools.client.model.ApiErrorBadRequest;
import org.openapitools.client.model.ApiErrorNotFound;
import org.openapitools.client.model.ApiErrorUnauthorized;
import org.openapitools.client.model.ApiErrorUnprocessableEntity;
import org.openapitools.client.model.AppliedAddOn;
import org.openapitools.client.model.AppliedAddOnInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AddOnsApi
 */
@Disabled
public class AddOnsApiTest {

    private final AddOnsApi api = new AddOnsApi();

    /**
     * Apply an add-on to a customer
     *
     * Apply an add-on to a customer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyAddOnTest() throws ApiException {
        AppliedAddOnInput appliedAddOnInput = null;
        AppliedAddOn response = api.applyAddOn(appliedAddOnInput);
        // TODO: test validations
    }

    /**
     * Create an add-on
     *
     * This endpoint is used to create an add-on that can be then attached to a one-off invoice.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAddOnTest() throws ApiException {
        AddOnCreateInput addOnCreateInput = null;
        AddOn response = api.createAddOn(addOnCreateInput);
        // TODO: test validations
    }

    /**
     * Delete an add-on
     *
     * This endpoint is used to delete an existing add-on.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destroyAddOnTest() throws ApiException {
        String code = null;
        AddOn response = api.destroyAddOn(code);
        // TODO: test validations
    }

    /**
     * Retrieve an add-on
     *
     * This endpoint is used to retrieve a specific add-on.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAddOnTest() throws ApiException {
        String code = null;
        AddOn response = api.findAddOn(code);
        // TODO: test validations
    }

    /**
     * List all add-ons
     *
     * This endpoint is used to list all existing add-ons.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAllAddOnsTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        AddOnsPaginated response = api.findAllAddOns(page, perPage);
        // TODO: test validations
    }

    /**
     * Update an add-on
     *
     * This endpoint is used to update an existing add-on.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAddOnTest() throws ApiException {
        String code = null;
        AddOnUpdateInput addOnUpdateInput = null;
        AddOn response = api.updateAddOn(code, addOnUpdateInput);
        // TODO: test validations
    }

}
