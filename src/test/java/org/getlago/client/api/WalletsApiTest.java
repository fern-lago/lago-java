/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.46.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.getlago.client.api;

import org.openapitools.client.model.ApiErrorBadRequest;
import org.openapitools.client.model.ApiErrorNotAllowed;
import org.openapitools.client.model.ApiErrorNotFound;
import org.openapitools.client.model.ApiErrorUnauthorized;
import org.openapitools.client.model.ApiErrorUnprocessableEntity;
import java.util.UUID;
import org.openapitools.client.model.Wallet;
import org.openapitools.client.model.WalletCreateInput;
import org.openapitools.client.model.WalletTransactionCreateInput;
import org.openapitools.client.model.WalletTransactions;
import org.openapitools.client.model.WalletTransactionsPaginated;
import org.openapitools.client.model.WalletUpdateInput;
import org.openapitools.client.model.WalletsPaginated;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for WalletsApi
 */
@Ignore
public class WalletsApiTest {

    private final WalletsApi api = new WalletsApi();

    
    /**
     * Create a wallet
     *
     * This endpoint is used to create a wallet with prepaid credits.
     */
    @Test
    public void createWalletTest()  {
        WalletCreateInput walletCreateInput = null;
        Wallet response = api.createWallet(walletCreateInput).block();

        // TODO: test validations
    }
    
    /**
     * Top up a wallet
     *
     * This endpoint is used to top-up an active wallet.
     */
    @Test
    public void createWalletTransactionTest()  {
        WalletTransactionCreateInput walletTransactionCreateInput = null;
        WalletTransactions response = api.createWalletTransaction(walletTransactionCreateInput).block();

        // TODO: test validations
    }
    
    /**
     * Terminate a wallet
     *
     * This endpoint is used to terminate an existing wallet with prepaid credits.
     */
    @Test
    public void destroyWalletTest()  {
        UUID lagoId = null;
        Wallet response = api.destroyWallet(lagoId).block();

        // TODO: test validations
    }
    
    /**
     * List all wallet transactions
     *
     * This endpoint is used to list all wallet transactions.
     */
    @Test
    public void findAllWalletTransactionsTest()  {
        UUID lagoId = null;
        Integer page = null;
        Integer perPage = null;
        String status = null;
        String transactionType = null;
        WalletTransactionsPaginated response = api.findAllWalletTransactions(lagoId, page, perPage, status, transactionType).block();

        // TODO: test validations
    }
    
    /**
     * List all wallets
     *
     * This endpoint is used to list all wallets with prepaid credits.
     */
    @Test
    public void findAllWalletsTest()  {
        String externalCustomerId = null;
        Integer page = null;
        Integer perPage = null;
        WalletsPaginated response = api.findAllWallets(externalCustomerId, page, perPage).block();

        // TODO: test validations
    }
    
    /**
     * Retrieve a wallet
     *
     * This endpoint is used to retrieve an existing wallet with prepaid credits.
     */
    @Test
    public void findWalletTest()  {
        UUID lagoId = null;
        Wallet response = api.findWallet(lagoId).block();

        // TODO: test validations
    }
    
    /**
     * Update a wallet
     *
     * This endpoint is used to update an existing wallet with prepaid credits.
     */
    @Test
    public void updateWalletTest()  {
        UUID lagoId = null;
        WalletUpdateInput walletUpdateInput = null;
        Wallet response = api.updateWallet(lagoId, walletUpdateInput).block();

        // TODO: test validations
    }
    
}
