/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.52.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.getlago.client.api;

import org.openapitools.client.model.ApiErrorBadRequest;
import org.openapitools.client.model.ApiErrorNotAllowed;
import org.openapitools.client.model.ApiErrorNotFound;
import org.openapitools.client.model.ApiErrorUnauthorized;
import org.openapitools.client.model.ApiErrorUnprocessableEntity;
import org.openapitools.client.model.Subscription;
import org.openapitools.client.model.SubscriptionCreateInput;
import org.openapitools.client.model.SubscriptionUpdateInput;
import org.openapitools.client.model.SubscriptionsPaginated;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for SubscriptionsApi
 */
@Ignore
public class SubscriptionsApiTest {

    private final SubscriptionsApi api = new SubscriptionsApi();

    
    /**
     * Assign a plan to a customer
     *
     * This endpoint assigns a plan to a customer, creating or modifying a subscription. Ideal for initial subscriptions or plan changes (upgrades/downgrades).
     */
    @Test
    public void createSubscriptionTest()  {
        SubscriptionCreateInput subscriptionCreateInput = null;
        Subscription response = api.createSubscription(subscriptionCreateInput).block();

        // TODO: test validations
    }
    
    /**
     * Terminate a subscription
     *
     * This endpoint allows you to terminate a subscription.
     */
    @Test
    public void destroySubscriptionTest()  {
        String externalId = null;
        String status = null;
        Subscription response = api.destroySubscription(externalId, status).block();

        // TODO: test validations
    }
    
    /**
     * List all subscriptions
     *
     * This endpoint retrieves all active subscriptions.
     */
    @Test
    public void findAllSubscriptionsTest()  {
        Integer page = null;
        Integer perPage = null;
        String externalCustomerId = null;
        String planCode = null;
        List<String> status = null;
        SubscriptionsPaginated response = api.findAllSubscriptions(page, perPage, externalCustomerId, planCode, status).block();

        // TODO: test validations
    }
    
    /**
     * Retrieve a subscription
     *
     * This endpoint retrieves a specific subscription.
     */
    @Test
    public void findSubscriptionTest()  {
        String externalId = null;
        Subscription response = api.findSubscription(externalId).block();

        // TODO: test validations
    }
    
    /**
     * Update a subscription
     *
     * This endpoint allows you to update a subscription.
     */
    @Test
    public void updateSubscriptionTest()  {
        String externalId = null;
        SubscriptionUpdateInput subscriptionUpdateInput = null;
        Subscription response = api.updateSubscription(externalId, subscriptionUpdateInput).block();

        // TODO: test validations
    }
    
}
